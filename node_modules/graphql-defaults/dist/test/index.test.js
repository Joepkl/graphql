"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = __importDefault(require("chai"));
const { expect } = chai_1.default;
const util_1 = __importDefault(require("util"));
util_1.default.inspect.defaultOptions.depth = 20;
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const index_1 = require("../index");
const graphql_import_1 = require("graphql-import");
let typeDefs = (0, graphql_import_1.importSchema)('./schema.graphql');
(0, index_1.genTypesDefinitionsMaps)(typeDefs);
// console.debug(`SCHEMA: `, schema);
// console.debug(`TYPEDEFS: `, typeDefs);
// console.debug(`AST TYPEDEFS: `, typeDefs);
let query, results, CONTEXT = {};
describe(`# Get GraphQL Query Object`, function () {
    // todo put other tests in context like below context for uniformity
    it(`returns correct non-nested js object of an OBJECT query`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getProfile ($id: ID!) {
          profile(id: $id) {
            firstname
            lastname
            about
            dob
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results.profile).to.be.deep.equal({
                __typename: 'Profile',
                firstname: '',
                lastname: '',
                about: '',
                dob: '',
            });
        });
    });
    context(`non-nested js object of an ARRAY query`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            before(function () {
                // let file = path.resolve(__dirname, './graphql/profile.graphql');
                // console.debug(`file: `, file);
                // let query = require (file);
                // console.debug(`imported query: `, query);
                CONTEXT = {};
                results = (0, index_1.genGraphQLDefaults)({
                    operation: (0, graphql_tag_1.default) `
          query getProfiles {
            profiles {
              firstname
              lastname
              about
              dob
            }
          }
        `,
                    context: CONTEXT,
                });
                // console.debug(`results: `, results);
            });
            it(`returns correct defaults`, function () {
                return __awaiter(this, void 0, void 0, function* () {
                    expect(results.profiles).to.be.deep.equal([{
                            __typename: 'Profile',
                            firstname: '',
                            lastname: '',
                            about: '',
                            dob: '',
                        }]);
                });
            });
            it(`merges partial server data with defaults`, function () {
                return __awaiter(this, void 0, void 0, function* () {
                    let merged = (0, index_1.mergeWithDefaults)({
                        path: 'profiles',
                        data: [{
                                firstname: 'Huga',
                                lastname: 'Matrix',
                                dob: null,
                            }],
                        context: CONTEXT,
                    });
                    // console.debug(`index.test.mjs-102: () - merged: `, merged);
                    expect(merged).to.be.eql([{
                            __typename: 'Profile',
                            firstname: 'Huga',
                            lastname: 'Matrix',
                            about: '',
                            dob: '',
                        }]);
                });
            });
        });
    });
    it(`returns correct non-NESTED js object of multiple objects query`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getProfileMsg ($id: ID!) {
          profile(id: $id) {
            firstname
            lastname
            about
            dob
          }
          message(id: $id) {
            id
            body
            created_at
            subject
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results).to.be.deep.equal({
                profile: {
                    __typename: 'Profile',
                    firstname: '',
                    lastname: '',
                    about: '',
                    dob: '',
                },
                message: {
                    __typename: 'Message',
                    id: null,
                    body: '',
                    created_at: '',
                    subject: '',
                },
            });
        });
    });
    it(`returns correct non-nested js object of multiple ARRAYS query`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getProfilesMsgs {
          profiles {
            firstname
            lastname
            about
            dob
          }
          messages {
            id
            body
            created_at
            subject
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results).to.be.deep.equal({
                profiles: [{
                        __typename: 'Profile',
                        firstname: '',
                        lastname: '',
                        about: '',
                        dob: '',
                    }],
                messages: [{
                        __typename: 'Message',
                        id: null,
                        body: '',
                        created_at: '',
                        subject: '',
                    }],
            });
        });
    });
    context(`NESTED js object of an ARRAY query`, function () {
        before(function () {
            CONTEXT = {};
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
          query getCategoriesContact {
            querytypes {
              label
              color
              icon
              departments {
                name
                created_at
                updated_at
                employees {
                  number
                }
                tickets {
                  subject
                }
              }
            }
          }
        `,
                context: CONTEXT,
            });
            // console.debug(`results: `, results);
        });
        it(`returns correct defaults`, function () {
            return __awaiter(this, void 0, void 0, function* () {
                // let file = path.resolve(__dirname, './graphql/profile.graphql');
                // console.debug(`file: `, file);
                // let query = require (file);
                // console.debug(`imported query: `, query);
                expect(results.querytypes).to.be.deep.equal([{
                        __typename: 'Querytype',
                        label: '',
                        color: '',
                        icon: '',
                        departments: [{
                                __typename: 'Department',
                                name: '',
                                created_at: '',
                                updated_at: '',
                                employees: [{
                                        __typename: 'Employee',
                                        number: '',
                                    }],
                                tickets: [{
                                        __typename: 'Ticket',
                                        subject: '',
                                    }],
                            }],
                    }]);
            });
        });
        it(`merges PARTIAL server data with defaults `, function () {
            return __awaiter(this, void 0, void 0, function* () {
                let merged = (0, index_1.mergeWithDefaults)({
                    path: 'querytypes',
                    data: [
                        {
                            label: 'Querytype 1',
                            color: 'Green',
                            departments: [{
                                    name: 'Department Name',
                                    created_at: '2019-09-11T10:00',
                                    updated_at: null,
                                    employees: null,
                                    tickets: [{ subject: 'Cobaltums messis in hortus!' }, { subject: 'hortus!' }],
                                }, {
                                    name: 'Department Name',
                                    created_at: '2019-09-11T10:00',
                                    updated_at: null,
                                    employees: [{ number: '79216dcf' }, { number: '9987542678' }],
                                    tickets: [],
                                }, {
                                    name: 'Department Name',
                                    created_at: '2019-09-11T10:00',
                                    updated_at: null,
                                    employees: null,
                                    tickets: [{ subject: 'Coordinatae assimilants, tanquam peritus lamia.' }, { subject: 'Onus festus frondator est.' }, { subject: 'Est fidelis magister, cesaris.' }],
                                }],
                        },
                        {
                            label: 'Querytype 2',
                            color: 'Brown',
                            icon: 'mdi-settings',
                            departments: null,
                        },
                        {
                            label: 'Querytype 3',
                            color: 'Red',
                            departments: [{
                                    name: 'Department Name',
                                    created_at: '2019-09-11T10:00',
                                    updated_at: null,
                                    employees: null,
                                    tickets: [{ subject: 'Cobaltums messis in hortus!' }, { subject: 'hortus!' }],
                                }, {
                                    name: 'Department Name',
                                    created_at: '2019-09-11T10:00',
                                    updated_at: null,
                                    employees: [{ number: '79216dcf' }, { number: '9987542678' }],
                                    tickets: [],
                                }, {
                                    name: 'Department Name',
                                    created_at: '2019-09-11T10:00',
                                    updated_at: null,
                                    employees: null,
                                    tickets: [{ subject: 'Coordinatae assimilants, tanquam peritus lamia.' }, { subject: 'Onus festus frondator est.' }, { subject: 'Est fidelis magister, cesaris.' }],
                                }],
                        },
                    ],
                    context: CONTEXT,
                });
                // console.debug(`index.test.mjs-259: () - merged: `, merged);
                expect(merged).to.be.eql([
                    {
                        __typename: 'Querytype',
                        label: 'Querytype 1',
                        color: 'Green',
                        icon: '',
                        departments: [{
                                __typename: 'Department',
                                name: 'Department Name',
                                created_at: '2019-09-11T10:00',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '' }],
                                tickets: [{ __typename: 'Ticket', subject: 'Cobaltums messis in hortus!' }, {
                                        __typename: 'Ticket',
                                        subject: 'hortus!',
                                    }],
                            }, {
                                __typename: 'Department',
                                name: 'Department Name',
                                created_at: '2019-09-11T10:00',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '79216dcf' }, {
                                        __typename: 'Employee',
                                        number: '9987542678',
                                    }],
                                tickets: [{ __typename: 'Ticket', subject: '' }],
                            }, {
                                __typename: 'Department',
                                name: 'Department Name',
                                created_at: '2019-09-11T10:00',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '' }],
                                tickets: [{
                                        __typename: 'Ticket',
                                        subject: 'Coordinatae assimilants, tanquam peritus lamia.',
                                    }, { __typename: 'Ticket', subject: 'Onus festus frondator est.' }, {
                                        __typename: 'Ticket',
                                        subject: 'Est fidelis magister, cesaris.',
                                    }],
                            }],
                    },
                    {
                        __typename: 'Querytype',
                        label: 'Querytype 2',
                        color: 'Brown',
                        icon: 'mdi-settings',
                        departments: [{
                                __typename: 'Department',
                                name: '',
                                created_at: '',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '' }],
                                tickets: [{ __typename: 'Ticket', subject: '' }],
                            }],
                    },
                    {
                        __typename: 'Querytype',
                        label: 'Querytype 3',
                        color: 'Red',
                        icon: '',
                        departments: [{
                                __typename: 'Department',
                                name: 'Department Name',
                                created_at: '2019-09-11T10:00',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '' }],
                                tickets: [{ __typename: 'Ticket', subject: 'Cobaltums messis in hortus!' },
                                    { __typename: 'Ticket', subject: 'hortus!' },
                                ],
                            }, {
                                __typename: 'Department',
                                name: 'Department Name',
                                created_at: '2019-09-11T10:00',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '79216dcf' }, {
                                        __typename: 'Employee',
                                        number: '9987542678',
                                    }],
                                tickets: [{ __typename: 'Ticket', subject: '' }],
                            }, {
                                __typename: 'Department',
                                name: 'Department Name',
                                created_at: '2019-09-11T10:00',
                                updated_at: '',
                                employees: [{ __typename: 'Employee', number: '' }],
                                tickets: [
                                    {
                                        __typename: 'Ticket',
                                        subject: 'Coordinatae assimilants, tanquam peritus lamia.',
                                    },
                                    { __typename: 'Ticket', subject: 'Onus festus frondator est.' },
                                    {
                                        __typename: 'Ticket',
                                        subject: 'Est fidelis magister, cesaris.',
                                    }
                                ],
                            }],
                    },
                ]);
            });
        });
        it(`merges completely EMPTY server data  with defaults `, function () {
            return __awaiter(this, void 0, void 0, function* () {
                let merged = (0, index_1.mergeWithDefaults)({ path: 'querytypes', data: [], context: results });
                // console.debug(`index.test.mjs-259: () - merged: `, merged);
                expect(merged).to.be.eql([{
                        __typename: 'Querytype',
                        label: '',
                        color: '',
                        icon: '',
                        departments: [{
                                __typename: 'Department',
                                name: '',
                                created_at: '',
                                updated_at: '',
                                employees: [{
                                        __typename: 'Employee',
                                        number: '',
                                    }],
                                tickets: [{
                                        __typename: 'Ticket',
                                        subject: '',
                                    }],
                            }],
                    }]);
            });
        });
        it(`merges completely UNDEFINED server data  with defaults `, function () {
            return __awaiter(this, void 0, void 0, function* () {
                let merged = (0, index_1.mergeWithDefaults)({ path: 'querytypes', context: results });
                // console.debug(`index.test.mjs-259: () - merged: `, merged);
                expect(merged).to.be.eql([{
                        __typename: 'Querytype',
                        label: '',
                        color: '',
                        icon: '',
                        departments: [{
                                __typename: 'Department',
                                name: '',
                                created_at: '',
                                updated_at: '',
                                employees: [{
                                        __typename: 'Employee',
                                        number: '',
                                    }],
                                tickets: [{
                                        __typename: 'Ticket',
                                        subject: '',
                                    }],
                            }],
                    }]);
            });
        });
    });
    it(`returns correct js object based on different name of type (phones is PhoneNumber type in schema)`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getContact {
          contacts {
            phones {
              number
              confirmed
            }
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results.contacts).to.be.deep.equal([{
                    __typename: 'Contact',
                    phones: [{
                            __typename: 'Phonenumber',
                            number: '',
                            confirmed: false,
                        }],
                }]);
        });
    });
    it(`returns correct NESTED js object of an ARRAY query with fragment`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getCategories {
          querytypes {
            ...catFields
            departments {
              ...deptFields
            }
          }
        }

        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            number
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results.querytypes).to.be.deep.equal([{
                    __typename: 'Querytype',
                    label: '',
                    color: '',
                    icon: '',
                    departments: [{
                            __typename: 'Department',
                            name: '',
                            created_at: '',
                            updated_at: '',
                            employees: [{
                                    __typename: 'Employee',
                                    number: '',
                                }],
                        }],
                }]);
        });
    });
    it(`returns correct js object when query in using aliases (phonebook instead of contacts...)`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getContact {
          phonebook: contacts {
            cellphones: phones {
              num: number
              confirmed
            }
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results.phonebook).to.be.deep.equal([{
                    __typename: 'Contact',
                    cellphones: [{
                            __typename: 'Phonenumber',
                            num: '',
                            confirmed: false,
                        }],
                }]);
        });
    });
    it(`returns correct NESTED js object with ListType populated`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        query getCategories {
          querytypes {
            ...catFields
            departments {
              ...deptFields
            }
          }
        }

        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            id
            number
          }
        }
      `,
                populateListTypes: false,
            });
            // console.debug(`results: `, results);
            expect(results.querytypes).to.be.deep.equal([{
                    __typename: 'Querytype',
                    label: '',
                    color: '',
                    icon: '',
                    departments: [{
                            __typename: 'Department',
                            name: '',
                            created_at: '',
                            updated_at: '',
                            employees: [],
                        }],
                }]);
        });
    });
    it.skip(`works with wrapped subscriptions`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        #      subscription updatedQuerytype($id: ID!) {
        #        afterUpdateQuerytype (id: $id) {
        #          querytype {
        #            ...catFields
        #            departments {
        #              ...deptFields
        #            }
        #          }
        #        }
        #      }


        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            number
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results.afterUpdateQuerytype).to.be.deep.equal({
                __typename: 'updateQuerytypePayload',
                querytype: {
                    __typename: 'Querytype',
                    label: '',
                    color: '',
                    icon: '',
                    departments: [{
                            __typename: 'Department',
                            name: '',
                            created_at: '',
                            updated_at: '',
                            employees: [{
                                    __typename: 'Employee',
                                    number: '',
                                }],
                        }],
                },
            });
        });
    });
    it(`works with unwrapped mutations`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        mutation loginM ($identifier: String!, $password: String!, $provider: String!){
          login (input: {identifier: $identifier, password: $password, provider: $provider}) {
            jwt
            user {
              username
            }
          }
        }
      `,
            });
            // console.debug(`results: `, results);
            expect(results.login).to.be.deep.equal({
                __typename: 'UsersPermissionsLoginPayload',
                jwt: '',
                user: {
                    __typename: 'UsersPermissionsUser',
                    username: '',
                },
            });
        });
    });
    it(`works with mutations`, function () {
        return __awaiter(this, void 0, void 0, function* () {
            // let file = path.resolve(__dirname, './graphql/profile.graphql');
            // console.debug(`file: `, file);
            // let query = require (file);
            // console.debug(`imported query: `, query);
            results = (0, index_1.genGraphQLDefaults)({
                operation: (0, graphql_tag_1.default) `
        mutation updateQuerytype ($id: ID!){
          updateQuerytype(input: {where: {id: $id}, data: {color: "red"}}) {
            querytype {
              ...catFields
              departments {
                ...deptFields
              }
            }
          }
        }


        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            number
          }
        }
      `,
                context: CONTEXT,
            });
            // console.debug(`results: `, results);
            expect(results.updateQuerytype).to.be.deep.equal({
                __typename: 'updateQuerytypePayload',
                querytype: {
                    __typename: 'Querytype',
                    label: '',
                    color: '',
                    icon: '',
                    departments: [{
                            __typename: 'Department',
                            name: '',
                            created_at: '',
                            updated_at: '',
                            employees: [{
                                    __typename: 'Employee',
                                    number: '',
                                }],
                        }],
                },
            });
        });
    });
});
