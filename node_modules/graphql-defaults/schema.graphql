# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union Morph = Account | AccountAggregator | AccountConnection | AccountConnectionAddress | AccountConnectionCreated_at | AccountConnectionElectricMeter | AccountConnectionHolder | AccountConnectionId | AccountConnectionNumber | AccountConnectionUpdated_at | AccountConnectionWaterMeter | AccountGroupBy | Action | ActionAggregator | ActionConnection | ActionConnectionCreated_at | ActionConnectionDescription | ActionConnectionEnabled | ActionConnectionId | ActionConnectionMethods | ActionConnectionServices | ActionConnectionUpdated_at | ActionGroupBy | Address | AddressAggregator | AddressConnection | AddressConnectionContact | AddressConnectionCreated_at | AddressConnectionId | AddressConnectionLine1 | AddressConnectionLine2 | AddressConnectionStreet | AddressConnectionUpdated_at | AddressGroupBy | AggregationAvg | AggregationCount | Call | CallAggregator | CallAggregatorAvg | CallAggregatorMax | CallAggregatorMin | CallAggregatorSum | CallConnection | CallConnectionAnsweredAt | CallConnectionCallSID | CallConnectionConversation | CallConnectionCreated_at | CallConnectionDuration | CallConnectionEndedAt | CallConnectionFrom | CallConnectionHasVoicemail | CallConnectionId | CallConnectionIsInbound | CallConnectionOpenedAt | CallConnectionRecording | CallConnectionRungAt | CallConnectionTo | CallConnectionUpdated_at | CallConnectionVoicemail | CallGroupBy | Campaign | CampaignAggregator | CampaignAggregatorAvg | CampaignAggregatorMax | CampaignAggregatorMin | CampaignAggregatorSum | CampaignConnection | CampaignConnectionCreated_at | CampaignConnectionDeletedAt | CampaignConnectionDescription | CampaignConnectionEndsAt | CampaignConnectionExpectedDuration | CampaignConnectionFlow | CampaignConnectionId | CampaignConnectionTitle | CampaignConnectionUpdated_at | CampaignGroupBy | City | CityAggregator | CityConnection | CityConnectionCountry | CityConnectionCreated_at | CityConnectionId | CityConnectionName | CityConnectionUpdated_at | CityGroupBy | Comment | CommentAggregator | CommentConnection | CommentConnectionBody | CommentConnectionCreated_at | CommentConnectionDeletedAt | CommentConnectionId | CommentConnectionTicket | CommentConnectionUpdated_at | CommentGroupBy | Contact | ContactAggregator | ContactConnection | ContactConnectionCreated_at | ContactConnectionId | ContactConnectionIsBlocked | ContactConnectionIsVerified | ContactConnectionProfile | ContactConnectionUpdated_at | ContactGroupBy | Conversation | ConversationAggregator | ConversationAggregatorAvg | ConversationAggregatorMax | ConversationAggregatorMin | ConversationAggregatorSum | ConversationConnection | ConversationConnectionCampaign | ConversationConnectionCreated_at | ConversationConnectionCustomer | ConversationConnectionEscalationLevel | ConversationConnectionId | ConversationConnectionIsOpen | ConversationConnectionLatestCall | ConversationConnectionLatestChat | ConversationConnectionLatestEmail | ConversationConnectionLatestFax | ConversationConnectionLatestSms | ConversationConnectionLatestTicket | ConversationConnectionUpdated_at | ConversationGroupBy | Country | CountryAggregator | CountryConnection | CountryConnectionCreated_at | CountryConnectionId | CountryConnectionName | CountryConnectionUpdated_at | CountryGroupBy | Customer | CustomerAggregator | CustomerConnection | CustomerConnectionCreated_at | CustomerConnectionId | CustomerConnectionInConversation | CustomerConnectionProfile | CustomerConnectionStatus | CustomerConnectionUpdated_at | CustomerGroupBy | Department | DepartmentAggregator | DepartmentConnection | DepartmentConnectionColor | DepartmentConnectionContact | DepartmentConnectionCreated_at | DepartmentConnectionHod | DepartmentConnectionIcon | DepartmentConnectionId | DepartmentConnectionName | DepartmentConnectionParentDepartment | DepartmentConnectionUpdated_at | DepartmentGroupBy | Disposition | DispositionAggregator | DispositionConnection | DispositionConnectionColor | DispositionConnectionCreated_at | DispositionConnectionDescription | DispositionConnectionEnabled | DispositionConnectionIcon | DispositionConnectionId | DispositionConnectionIsConclusive | DispositionConnectionTitle | DispositionConnectionUpdated_at | DispositionGroupBy | Emailaddress | EmailaddressAggregator | EmailaddressConnection | EmailaddressConnectionAddress | EmailaddressConnectionConfirmed | EmailaddressConnectionContact | EmailaddressConnectionCreated_at | EmailaddressConnectionId | EmailaddressConnectionUpdated_at | EmailaddressGroupBy | Employee | EmployeeAggregator | EmployeeConnection | EmployeeConnectionCreated_at | EmployeeConnectionHodOf | EmployeeConnectionId | EmployeeConnectionInConversation | EmployeeConnectionJobTitle | EmployeeConnectionNumber | EmployeeConnectionProfile | EmployeeConnectionTeam | EmployeeConnectionTeamLeaderOf | EmployeeConnectionUpdated_at | EmployeeGroupBy | Escalation | EscalationAggregator | EscalationConnection | EscalationConnectionCreated_at | EscalationConnectionDays | EscalationConnectionDepartment | EscalationConnectionId | EscalationConnectionLabel | EscalationConnectionQueryType | EscalationConnectionRegion | EscalationConnectionSubQueryType | EscalationConnectionUpdated_at | EscalationGroupBy | ForgotPassword | Log | LogAggregator | LogConnection | LogConnectionAction | LogConnectionController | LogConnectionCreated_at | LogConnectionId | LogConnectionType | LogConnectionUpdated_at | LogGroupBy | Message | MessageAggregator | MessageConnection | MessageConnectionBody | MessageConnectionChatConversation | MessageConnectionCreated_at | MessageConnectionDeletedAt | MessageConnectionDeliveredAt | MessageConnectionEmailConversation | MessageConnectionFaxConversation | MessageConnectionFromEmail | MessageConnectionFromPhone | MessageConnectionId | MessageConnectionIsInbound | MessageConnectionReadAt | MessageConnectionSmsConversation | MessageConnectionSubject | MessageConnectionToEmail | MessageConnectionToPhone | MessageConnectionUpdated_at | MessageGroupBy | Missedcall | MissedcallAggregator | MissedcallConnection | MissedcallConnectionCall | MissedcallConnectionCancelledAt | MissedcallConnectionCreated_at | MissedcallConnectionFailedAt | MissedcallConnectionHasVoicemail | MissedcallConnectionId | MissedcallConnectionIgnoredAt | MissedcallConnectionLog | MissedcallConnectionOpenedAt | MissedcallConnectionPhone | MissedcallConnectionRejectedAt | MissedcallConnectionUpdated_at | MissedcallGroupBy | Phonenumber | PhonenumberAggregator | PhonenumberConnection | PhonenumberConnectionConfirmed | PhonenumberConnectionContact | PhonenumberConnectionCreated_at | PhonenumberConnectionDomain | PhonenumberConnectionId | PhonenumberConnectionKind | PhonenumberConnectionLatestCall | PhonenumberConnectionNumber | PhonenumberConnectionUpdated_at | PhonenumberGroupBy | Phonenumberkind | Priority | PriorityAggregator | PriorityConnection | PriorityConnectionColor | PriorityConnectionCreated_at | PriorityConnectionIcon | PriorityConnectionId | PriorityConnectionLabel | PriorityConnectionLevel | PriorityConnectionUpdated_at | PriorityGroupBy | Profile | ProfileAggregator | ProfileAggregatorAvg | ProfileAggregatorMax | ProfileAggregatorMin | ProfileAggregatorSum | ProfileConnection | ProfileConnectionAbout | ProfileConnectionAvatar | ProfileConnectionContact | ProfileConnectionCreated_at | ProfileConnectionDob | ProfileConnectionEmployment | ProfileConnectionFirstname | ProfileConnectionId | ProfileConnectionLastname | ProfileConnectionMiddlename | ProfileConnectionNatID | ProfileConnectionPassportNum | ProfileConnectionPatronage | ProfileConnectionRating | ProfileConnectionSex | ProfileConnectionUpdated_at | ProfileConnectionUser | ProfileGroupBy | Querytype | QuerytypeAggregator | QuerytypeConnection | QuerytypeConnectionColor | QuerytypeConnectionCreated_at | QuerytypeConnectionIcon | QuerytypeConnectionId | QuerytypeConnectionLabel | QuerytypeConnectionTicketFields | QuerytypeConnectionUpdated_at | QuerytypeGroupBy | Region | RegionAggregator | RegionConnection | RegionConnectionCreated_at | RegionConnectionId | RegionConnectionName | RegionConnectionUpdated_at | RegionGroupBy | Settingsapi | SettingsapiAggregator | SettingsapiConnection | SettingsapiConnectionApiServerHost | SettingsapiConnectionApiServerPort | SettingsapiConnectionCreated_at | SettingsapiConnectionId | SettingsapiConnectionInboundCallESLPort | SettingsapiConnectionPhonenumberKindRules | SettingsapiConnectionSipDomain | SettingsapiConnectionSipHost | SettingsapiConnectionSipPort | SettingsapiConnectionSipProtocol | SettingsapiConnectionSwitchCallRecording | SettingsapiConnectionSwitchPath | SettingsapiConnectionSwitchVoicemail | SettingsapiConnectionUpdated_at | SettingsapiGroupBy | Settingsapp | SettingsappAggregator | SettingsappAggregatorAvg | SettingsappAggregatorMax | SettingsappAggregatorMin | SettingsappAggregatorSum | SettingsappConnection | SettingsappConnectionAppCaption | SettingsappConnectionAppIcon | SettingsappConnectionAppLogo | SettingsappConnectionAppName | SettingsappConnectionCreated_at | SettingsappConnectionDevLogo | SettingsappConnectionDevName | SettingsappConnectionId | SettingsappConnectionInitialAutoStatusChangeTimeout | SettingsappConnectionOrgCaption | SettingsappConnectionOrgLogo | SettingsappConnectionOrgName | SettingsappConnectionUnauthorizedElements | SettingsappConnectionUpdated_at | SettingsappGroupBy | Settingsuser | SettingsuserAggregator | SettingsuserConnection | SettingsuserConnectionCreated_at | SettingsuserConnectionId | SettingsuserConnectionUpdated_at | SettingsuserConnectionUser | SettingsuserGroupBy | Skill | SkillAggregator | SkillAggregatorAvg | SkillAggregatorMax | SkillAggregatorMin | SkillAggregatorSum | SkillConnection | SkillConnectionCreated_at | SkillConnectionId | SkillConnectionLevel | SkillConnectionTitle | SkillConnectionUpdated_at | SkillGroupBy | Sso | SsoAggregator | SsoConnection | SsoConnectionCreated_at | SsoConnectionId | SsoConnectionUpdated_at | SsoGroupBy | Status | StatusAggregator | StatusAggregatorAvg | StatusAggregatorMax | StatusAggregatorMin | StatusAggregatorSum | StatusConnection | StatusConnectionAutoTimeout | StatusConnectionBgColor | StatusConnectionCaption | StatusConnectionColor | StatusConnectionCreated_at | StatusConnectionFsState | StatusConnectionFsStatus | StatusConnectionIcon | StatusConnectionId | StatusConnectionIsOnline | StatusConnectionLabel | StatusConnectionNextStatus | StatusConnectionOnBusyWith | StatusConnectionPrevStatus | StatusConnectionShowInOpts | StatusConnectionSlug | StatusConnectionUpdated_at | StatusGroupBy | Statuslog | StatuslogAggregator | StatuslogConnection | StatuslogConnectionCreated_at | StatuslogConnectionCumulativeDuration | StatuslogConnectionEmployee | StatuslogConnectionId | StatuslogConnectionPrevStatus | StatuslogConnectionPrevStatusDuration | StatuslogConnectionStatus | StatuslogConnectionUpdated_at | StatuslogGroupBy | Street | StreetAggregator | StreetConnection | StreetConnectionCreated_at | StreetConnectionId | StreetConnectionName | StreetConnectionSuburb | StreetConnectionUpdated_at | StreetGroupBy | Suburb | SuburbAggregator | SuburbConnection | SuburbConnectionCity | SuburbConnectionCreated_at | SuburbConnectionId | SuburbConnectionName | SuburbConnectionUpdated_at | SuburbGroupBy | Survey | SurveyAggregator | SurveyAggregatorAvg | SurveyAggregatorMax | SurveyAggregatorMin | SurveyAggregatorSum | SurveyConnection | SurveyConnectionConversation | SurveyConnectionCreated_at | SurveyConnectionCustomer | SurveyConnectionDeletedAt | SurveyConnectionDisposition | SurveyConnectionEmployee | SurveyConnectionId | SurveyConnectionRating | SurveyConnectionRecording | SurveyConnectionUpdated_at | SurveyGroupBy | Team | TeamAggregator | TeamConnection | TeamConnectionCreated_at | TeamConnectionId | TeamConnectionLeader | TeamConnectionName | TeamConnectionUpdated_at | TeamGroupBy | Ticket | TicketAggregator | TicketConnection | TicketConnectionAssignedTo | TicketConnectionConversation | TicketConnectionCreated_at | TicketConnectionDepartment | TicketConnectionDescription | TicketConnectionDisposition | TicketConnectionId | TicketConnectionIsClosed | TicketConnectionOpenedBy | TicketConnectionPriority | TicketConnectionQueryType | TicketConnectionRegion | TicketConnectionSubQueryType | TicketConnectionSubject | TicketConnectionTicketType | TicketConnectionUpdated_at | TicketGroupBy | Tickettype | TickettypeAggregator | TickettypeConnection | TickettypeConnectionCreated_at | TickettypeConnectionId | TickettypeConnectionType | TickettypeConnectionUpdated_at | TickettypeGroupBy | UploadFile | UploadFileAggregator | UploadFileConnection | UploadFileConnectionCreated_at | UploadFileConnectionExt | UploadFileConnectionHash | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSha256 | UploadFileConnectionSize | UploadFileConnectionUpdated_at | UploadFileConnectionUrl | UploadFileGroupBy | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProfile | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionSettings | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserGroupBy | createAccountPayload | createActionPayload | createAddressPayload | createCallPayload | createCampaignPayload | createCityPayload | createCommentPayload | createContactPayload | createConversationPayload | createCountryPayload | createCustomerPayload | createDepartmentPayload | createDispositionPayload | createEmailaddressPayload | createEmployeePayload | createEscalationPayload | createFilePayload | createLogPayload | createMessagePayload | createMissedcallPayload | createPhonenumberPayload | createPriorityPayload | createProfilePayload | createQuerytypePayload | createRegionPayload | createRolePayload | createSettingsapiPayload | createSettingsappPayload | createSettingsuserPayload | createSkillPayload | createSsoPayload | createStatusPayload | createStatuslogPayload | createStreetPayload | createSuburbPayload | createSurveyPayload | createTeamPayload | createTicketPayload | createTickettypePayload | createUserPayload | deleteAccountPayload | deleteActionPayload | deleteAddressPayload | deleteCallPayload | deleteCampaignPayload | deleteCityPayload | deleteCommentPayload | deleteContactPayload | deleteConversationPayload | deleteCountryPayload | deleteCustomerPayload | deleteDepartmentPayload | deleteDispositionPayload | deleteEmailaddressPayload | deleteEmployeePayload | deleteEscalationPayload | deleteFilePayload | deleteLogPayload | deleteMessagePayload | deleteMissedcallPayload | deletePhonenumberPayload | deletePriorityPayload | deleteProfilePayload | deleteQuerytypePayload | deleteRegionPayload | deleteRolePayload | deleteSettingsapiPayload | deleteSettingsappPayload | deleteSettingsuserPayload | deleteSkillPayload | deleteSsoPayload | deleteStatusPayload | deleteStatuslogPayload | deleteStreetPayload | deleteSuburbPayload | deleteSurveyPayload | deleteTeamPayload | deleteTicketPayload | deleteTickettypePayload | deleteUserPayload | updateAccountPayload | updateActionPayload | updateAddressPayload | updateCallPayload | updateCampaignPayload | updateCityPayload | updateCommentPayload | updateContactPayload | updateConversationPayload | updateCountryPayload | updateCustomerPayload | updateDepartmentPayload | updateDispositionPayload | updateEmailaddressPayload | updateEmployeePayload | updateEscalationPayload | updateFilePayload | updateLogPayload | updateMessagePayload | updateMissedcallPayload | updatePhonenumberPayload | updatePriorityPayload | updateProfilePayload | updateQuerytypePayload | updateRegionPayload | updateRolePayload | updateSettingsapiPayload | updateSettingsappPayload | updateSettingsuserPayload | updateSkillPayload | updateSsoPayload | updateStatusPayload | updateStatuslogPayload | updateStreetPayload | updateSuburbPayload | updateSurveyPayload | updateTeamPayload | updateTicketPayload | updateTickettypePayload | updateUserPayload

type Account {
  address: Address
  created_at: DateTime!
  customers(limit: Int, sort: String, start: Int, where: JSON): [Customer]
  electricMeter: String
  holder: Customer
  id: ID!
  number: String
  updated_at: DateTime!
  waterMeter: String
}

type AccountAggregator {
  count: Int
  totalCount: Int
}

type AccountConnection {
  aggregate: AccountAggregator
  groupBy: AccountGroupBy
  values: [Account]
}

type AccountConnectionAddress {
  connection: AccountConnection
  key: ID
}

type AccountConnectionCreated_at {
  connection: AccountConnection
  key: DateTime
}

type AccountConnectionElectricMeter {
  connection: AccountConnection
  key: String
}

type AccountConnectionHolder {
  connection: AccountConnection
  key: ID
}

type AccountConnectionId {
  connection: AccountConnection
  key: ID
}

type AccountConnectionNumber {
  connection: AccountConnection
  key: String
}

type AccountConnectionUpdated_at {
  connection: AccountConnection
  key: DateTime
}

type AccountConnectionWaterMeter {
  connection: AccountConnection
  key: String
}

type AccountGroupBy {
  address: [AccountConnectionAddress]
  created_at: [AccountConnectionCreated_at]
  electricMeter: [AccountConnectionElectricMeter]
  holder: [AccountConnectionHolder]
  id: [AccountConnectionId]
  number: [AccountConnectionNumber]
  updated_at: [AccountConnectionUpdated_at]
  waterMeter: [AccountConnectionWaterMeter]
}

type Action {
  created_at: DateTime!
  description: String
  dispositions(limit: Int, sort: String, start: Int, where: JSON): [Disposition]
  enabled: Boolean
  id: ID!
  methods: String
  services: String
  updated_at: DateTime!
}

type ActionAggregator {
  count: Int
  totalCount: Int
}

type ActionConnection {
  aggregate: ActionAggregator
  groupBy: ActionGroupBy
  values: [Action]
}

type ActionConnectionCreated_at {
  connection: ActionConnection
  key: DateTime
}

type ActionConnectionDescription {
  connection: ActionConnection
  key: String
}

type ActionConnectionEnabled {
  connection: ActionConnection
  key: Boolean
}

type ActionConnectionId {
  connection: ActionConnection
  key: ID
}

type ActionConnectionMethods {
  connection: ActionConnection
  key: String
}

type ActionConnectionServices {
  connection: ActionConnection
  key: String
}

type ActionConnectionUpdated_at {
  connection: ActionConnection
  key: DateTime
}

type ActionGroupBy {
  created_at: [ActionConnectionCreated_at]
  description: [ActionConnectionDescription]
  enabled: [ActionConnectionEnabled]
  id: [ActionConnectionId]
  methods: [ActionConnectionMethods]
  services: [ActionConnectionServices]
  updated_at: [ActionConnectionUpdated_at]
}

type Address {
  contact: Contact
  created_at: DateTime!
  id: ID!
  line1: String!
  line2: String
  street: Street
  updated_at: DateTime!
}

type AddressAggregator {
  count: Int
  totalCount: Int
}

type AddressConnection {
  aggregate: AddressAggregator
  groupBy: AddressGroupBy
  values: [Address]
}

type AddressConnectionContact {
  connection: AddressConnection
  key: ID
}

type AddressConnectionCreated_at {
  connection: AddressConnection
  key: DateTime
}

type AddressConnectionId {
  connection: AddressConnection
  key: ID
}

type AddressConnectionLine1 {
  connection: AddressConnection
  key: String
}

type AddressConnectionLine2 {
  connection: AddressConnection
  key: String
}

type AddressConnectionStreet {
  connection: AddressConnection
  key: ID
}

type AddressConnectionUpdated_at {
  connection: AddressConnection
  key: DateTime
}

type AddressGroupBy {
  contact: [AddressConnectionContact]
  created_at: [AddressConnectionCreated_at]
  id: [AddressConnectionId]
  line1: [AddressConnectionLine1]
  line2: [AddressConnectionLine2]
  street: [AddressConnectionStreet]
  updated_at: [AddressConnectionUpdated_at]
}

type AggregationAvg {
  avg: Int
}

type AggregationCount {
  count: Int
}

type Call {
  answeredAt: DateTime
  callSID: String
  conversation: Conversation
  created_at: DateTime!
  duration: Int
  endedAt: DateTime
  from: Phonenumber
  "deprecating this in favour of misses and voicemail string below"
  hasVoicemail: Boolean
  id: ID!
  isInbound: Boolean
  misses(limit: Int, sort: String, start: Int, where: JSON): [Missedcall]
  openedAt: DateTime
  recording: String
  rungAt: DateTime
  to: Phonenumber
  updated_at: DateTime!
  voicemail: String
}

type CallAggregator {
  avg: CallAggregatorAvg
  count: Int
  max: CallAggregatorMax
  min: CallAggregatorMin
  sum: CallAggregatorSum
  totalCount: Int
}

type CallAggregatorAvg {
  duration: Float
}

type CallAggregatorMax {
  duration: Float
}

type CallAggregatorMin {
  duration: Float
}

type CallAggregatorSum {
  duration: Float
}

type CallConnection {
  aggregate: CallAggregator
  groupBy: CallGroupBy
  values: [Call]
}

type CallConnectionAnsweredAt {
  connection: CallConnection
  key: DateTime
}

type CallConnectionCallSID {
  connection: CallConnection
  key: String
}

type CallConnectionConversation {
  connection: CallConnection
  key: ID
}

type CallConnectionCreated_at {
  connection: CallConnection
  key: DateTime
}

type CallConnectionDuration {
  connection: CallConnection
  key: Int
}

type CallConnectionEndedAt {
  connection: CallConnection
  key: DateTime
}

type CallConnectionFrom {
  connection: CallConnection
  key: ID
}

type CallConnectionHasVoicemail {
  connection: CallConnection
  key: Boolean
}

type CallConnectionId {
  connection: CallConnection
  key: ID
}

type CallConnectionIsInbound {
  connection: CallConnection
  key: Boolean
}

type CallConnectionOpenedAt {
  connection: CallConnection
  key: DateTime
}

type CallConnectionRecording {
  connection: CallConnection
  key: String
}

type CallConnectionRungAt {
  connection: CallConnection
  key: DateTime
}

type CallConnectionTo {
  connection: CallConnection
  key: ID
}

type CallConnectionUpdated_at {
  connection: CallConnection
  key: DateTime
}

type CallConnectionVoicemail {
  connection: CallConnection
  key: String
}

type CallGroupBy {
  answeredAt: [CallConnectionAnsweredAt]
  callSID: [CallConnectionCallSID]
  conversation: [CallConnectionConversation]
  created_at: [CallConnectionCreated_at]
  duration: [CallConnectionDuration]
  endedAt: [CallConnectionEndedAt]
  from: [CallConnectionFrom]
  hasVoicemail: [CallConnectionHasVoicemail]
  id: [CallConnectionId]
  isInbound: [CallConnectionIsInbound]
  openedAt: [CallConnectionOpenedAt]
  recording: [CallConnectionRecording]
  rungAt: [CallConnectionRungAt]
  to: [CallConnectionTo]
  updated_at: [CallConnectionUpdated_at]
  voicemail: [CallConnectionVoicemail]
}

type Campaign {
  conversations(limit: Int, sort: String, start: Int, where: JSON): [Conversation]
  created_at: DateTime!
  deletedAt: DateTime
  description: String
  endsAt: DateTime
  expectedDuration: Int
  flow: JSON
  id: ID!
  teams(limit: Int, sort: String, start: Int, where: JSON): [Team]
  title: String
  updated_at: DateTime!
}

type CampaignAggregator {
  avg: CampaignAggregatorAvg
  count: Int
  max: CampaignAggregatorMax
  min: CampaignAggregatorMin
  sum: CampaignAggregatorSum
  totalCount: Int
}

type CampaignAggregatorAvg {
  expectedDuration: Float
}

type CampaignAggregatorMax {
  expectedDuration: Float
}

type CampaignAggregatorMin {
  expectedDuration: Float
}

type CampaignAggregatorSum {
  expectedDuration: Float
}

type CampaignConnection {
  aggregate: CampaignAggregator
  groupBy: CampaignGroupBy
  values: [Campaign]
}

type CampaignConnectionCreated_at {
  connection: CampaignConnection
  key: DateTime
}

type CampaignConnectionDeletedAt {
  connection: CampaignConnection
  key: DateTime
}

type CampaignConnectionDescription {
  connection: CampaignConnection
  key: String
}

type CampaignConnectionEndsAt {
  connection: CampaignConnection
  key: DateTime
}

type CampaignConnectionExpectedDuration {
  connection: CampaignConnection
  key: Int
}

type CampaignConnectionFlow {
  connection: CampaignConnection
  key: JSON
}

type CampaignConnectionId {
  connection: CampaignConnection
  key: ID
}

type CampaignConnectionTitle {
  connection: CampaignConnection
  key: String
}

type CampaignConnectionUpdated_at {
  connection: CampaignConnection
  key: DateTime
}

type CampaignGroupBy {
  created_at: [CampaignConnectionCreated_at]
  deletedAt: [CampaignConnectionDeletedAt]
  description: [CampaignConnectionDescription]
  endsAt: [CampaignConnectionEndsAt]
  expectedDuration: [CampaignConnectionExpectedDuration]
  flow: [CampaignConnectionFlow]
  id: [CampaignConnectionId]
  title: [CampaignConnectionTitle]
  updated_at: [CampaignConnectionUpdated_at]
}

type City {
  country: Country
  created_at: DateTime!
  id: ID!
  name: String!
  suburbs(limit: Int, sort: String, start: Int, where: JSON): [Suburb]
  updated_at: DateTime!
}

type CityAggregator {
  count: Int
  totalCount: Int
}

type CityConnection {
  aggregate: CityAggregator
  groupBy: CityGroupBy
  values: [City]
}

type CityConnectionCountry {
  connection: CityConnection
  key: ID
}

type CityConnectionCreated_at {
  connection: CityConnection
  key: DateTime
}

type CityConnectionId {
  connection: CityConnection
  key: ID
}

type CityConnectionName {
  connection: CityConnection
  key: String
}

type CityConnectionUpdated_at {
  connection: CityConnection
  key: DateTime
}

type CityGroupBy {
  country: [CityConnectionCountry]
  created_at: [CityConnectionCreated_at]
  id: [CityConnectionId]
  name: [CityConnectionName]
  updated_at: [CityConnectionUpdated_at]
}

type Comment {
  body: String
  created_at: DateTime!
  deletedAt: DateTime
  id: ID!
  ticket: Ticket
  updated_at: DateTime!
}

type CommentAggregator {
  count: Int
  totalCount: Int
}

type CommentConnection {
  aggregate: CommentAggregator
  groupBy: CommentGroupBy
  values: [Comment]
}

type CommentConnectionBody {
  connection: CommentConnection
  key: String
}

type CommentConnectionCreated_at {
  connection: CommentConnection
  key: DateTime
}

type CommentConnectionDeletedAt {
  connection: CommentConnection
  key: DateTime
}

type CommentConnectionId {
  connection: CommentConnection
  key: ID
}

type CommentConnectionTicket {
  connection: CommentConnection
  key: ID
}

type CommentConnectionUpdated_at {
  connection: CommentConnection
  key: DateTime
}

type CommentGroupBy {
  body: [CommentConnectionBody]
  created_at: [CommentConnectionCreated_at]
  deletedAt: [CommentConnectionDeletedAt]
  id: [CommentConnectionId]
  ticket: [CommentConnectionTicket]
  updated_at: [CommentConnectionUpdated_at]
}

type Contact {
  addresses(limit: Int, sort: String, start: Int, where: JSON): [Address]
  created_at: DateTime!
  emailaddresses(limit: Int, sort: String, start: Int, where: JSON): [Emailaddress]
  id: ID!
  isBlocked: Boolean
  isVerified: Boolean
  phones(limit: Int, sort: String, start: Int, where: JSON): [Phonenumber]
  profile: Profile
  updated_at: DateTime!
}

type ContactAggregator {
  count: Int
  totalCount: Int
}

type ContactConnection {
  aggregate: ContactAggregator
  groupBy: ContactGroupBy
  values: [Contact]
}

type ContactConnectionCreated_at {
  connection: ContactConnection
  key: DateTime
}

type ContactConnectionId {
  connection: ContactConnection
  key: ID
}

type ContactConnectionIsBlocked {
  connection: ContactConnection
  key: Boolean
}

type ContactConnectionIsVerified {
  connection: ContactConnection
  key: Boolean
}

type ContactConnectionProfile {
  connection: ContactConnection
  key: ID
}

type ContactConnectionUpdated_at {
  connection: ContactConnection
  key: DateTime
}

type ContactGroupBy {
  created_at: [ContactConnectionCreated_at]
  id: [ContactConnectionId]
  isBlocked: [ContactConnectionIsBlocked]
  isVerified: [ContactConnectionIsVerified]
  profile: [ContactConnectionProfile]
  updated_at: [ContactConnectionUpdated_at]
}

type Conversation {
  calls(limit: Int, sort: String, start: Int, where: JSON): [Call]
  campaign: Campaign
  chats(limit: Int, sort: String, start: Int, where: JSON): [Message]
  created_at: DateTime!
  customer: Customer
  emails(limit: Int, sort: String, start: Int, where: JSON): [Message]
  employees(limit: Int, sort: String, start: Int, where: JSON): [Employee]
  escalationLevel: Int
  faxes(limit: Int, sort: String, start: Int, where: JSON): [Message]
  id: ID!
  isOpen: Boolean
  latestCall: Call
  latestChat: Message
  latestEmail: Message
  latestFax: Message
  latestSms: Message
  latestTicket: Ticket
  sms(limit: Int, sort: String, start: Int, where: JSON): [Message]
  surveys(limit: Int, sort: String, start: Int, where: JSON): [Survey]
  tickets(limit: Int, sort: String, start: Int, where: JSON): [Ticket]
  updated_at: DateTime!
}

type ConversationAggregator {
  avg: ConversationAggregatorAvg
  count: Int
  max: ConversationAggregatorMax
  min: ConversationAggregatorMin
  sum: ConversationAggregatorSum
  totalCount: Int
}

type ConversationAggregatorAvg {
  escalationLevel: Float
}

type ConversationAggregatorMax {
  escalationLevel: Float
}

type ConversationAggregatorMin {
  escalationLevel: Float
}

type ConversationAggregatorSum {
  escalationLevel: Float
}

type ConversationConnection {
  aggregate: ConversationAggregator
  groupBy: ConversationGroupBy
  values: [Conversation]
}

type ConversationConnectionCampaign {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionCreated_at {
  connection: ConversationConnection
  key: DateTime
}

type ConversationConnectionCustomer {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionEscalationLevel {
  connection: ConversationConnection
  key: Int
}

type ConversationConnectionId {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionIsOpen {
  connection: ConversationConnection
  key: Boolean
}

type ConversationConnectionLatestCall {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionLatestChat {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionLatestEmail {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionLatestFax {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionLatestSms {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionLatestTicket {
  connection: ConversationConnection
  key: ID
}

type ConversationConnectionUpdated_at {
  connection: ConversationConnection
  key: DateTime
}

type ConversationGroupBy {
  campaign: [ConversationConnectionCampaign]
  created_at: [ConversationConnectionCreated_at]
  customer: [ConversationConnectionCustomer]
  escalationLevel: [ConversationConnectionEscalationLevel]
  id: [ConversationConnectionId]
  isOpen: [ConversationConnectionIsOpen]
  latestCall: [ConversationConnectionLatestCall]
  latestChat: [ConversationConnectionLatestChat]
  latestEmail: [ConversationConnectionLatestEmail]
  latestFax: [ConversationConnectionLatestFax]
  latestSms: [ConversationConnectionLatestSms]
  latestTicket: [ConversationConnectionLatestTicket]
  updated_at: [ConversationConnectionUpdated_at]
}

type Country {
  cities(limit: Int, sort: String, start: Int, where: JSON): [City]
  created_at: DateTime!
  id: ID!
  name: String!
  updated_at: DateTime!
}

type CountryAggregator {
  count: Int
  totalCount: Int
}

type CountryConnection {
  aggregate: CountryAggregator
  groupBy: CountryGroupBy
  values: [Country]
}

type CountryConnectionCreated_at {
  connection: CountryConnection
  key: DateTime
}

type CountryConnectionId {
  connection: CountryConnection
  key: ID
}

type CountryConnectionName {
  connection: CountryConnection
  key: String
}

type CountryConnectionUpdated_at {
  connection: CountryConnection
  key: DateTime
}

type CountryGroupBy {
  created_at: [CountryConnectionCreated_at]
  id: [CountryConnectionId]
  name: [CountryConnectionName]
  updated_at: [CountryConnectionUpdated_at]
}

type Customer {
  accounts(limit: Int, sort: String, start: Int, where: JSON): [Account]
  conversations(limit: Int, sort: String, start: Int, where: JSON): [Conversation]
  created_at: DateTime!
  id: ID!
  inConversation: Conversation
  profile: Profile
  status: Status
  surveys(limit: Int, sort: String, start: Int, where: JSON): [Survey]
  updated_at: DateTime!
}

type CustomerAggregator {
  count: Int
  totalCount: Int
}

type CustomerConnection {
  aggregate: CustomerAggregator
  groupBy: CustomerGroupBy
  values: [Customer]
}

type CustomerConnectionCreated_at {
  connection: CustomerConnection
  key: DateTime
}

type CustomerConnectionId {
  connection: CustomerConnection
  key: ID
}

type CustomerConnectionInConversation {
  connection: CustomerConnection
  key: ID
}

type CustomerConnectionProfile {
  connection: CustomerConnection
  key: ID
}

type CustomerConnectionStatus {
  connection: CustomerConnection
  key: ID
}

type CustomerConnectionUpdated_at {
  connection: CustomerConnection
  key: DateTime
}

type CustomerGroupBy {
  created_at: [CustomerConnectionCreated_at]
  id: [CustomerConnectionId]
  inConversation: [CustomerConnectionInConversation]
  profile: [CustomerConnectionProfile]
  status: [CustomerConnectionStatus]
  updated_at: [CustomerConnectionUpdated_at]
}

type Department {
  color: String
  contact: Contact
  created_at: DateTime!
  dispositions(limit: Int, sort: String, start: Int, where: JSON): [Disposition]
  employees(limit: Int, sort: String, start: Int, where: JSON): [Employee]
  hod: Employee
  icon: String
  id: ID!
  name: String
  parentDepartment: Department
  queryTypes(limit: Int, sort: String, start: Int, where: JSON): [Querytype]
  regions(limit: Int, sort: String, start: Int, where: JSON): [Region]
  subDepartments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  ticketTypes(limit: Int, sort: String, start: Int, where: JSON): [Tickettype]
  tickets(limit: Int, sort: String, start: Int, where: JSON): [Ticket]
  updated_at: DateTime!
}

type DepartmentAggregator {
  count: Int
  totalCount: Int
}

type DepartmentConnection {
  aggregate: DepartmentAggregator
  groupBy: DepartmentGroupBy
  values: [Department]
}

type DepartmentConnectionColor {
  connection: DepartmentConnection
  key: String
}

type DepartmentConnectionContact {
  connection: DepartmentConnection
  key: ID
}

type DepartmentConnectionCreated_at {
  connection: DepartmentConnection
  key: DateTime
}

type DepartmentConnectionHod {
  connection: DepartmentConnection
  key: ID
}

type DepartmentConnectionIcon {
  connection: DepartmentConnection
  key: String
}

type DepartmentConnectionId {
  connection: DepartmentConnection
  key: ID
}

type DepartmentConnectionName {
  connection: DepartmentConnection
  key: String
}

type DepartmentConnectionParentDepartment {
  connection: DepartmentConnection
  key: ID
}

type DepartmentConnectionUpdated_at {
  connection: DepartmentConnection
  key: DateTime
}

type DepartmentGroupBy {
  color: [DepartmentConnectionColor]
  contact: [DepartmentConnectionContact]
  created_at: [DepartmentConnectionCreated_at]
  hod: [DepartmentConnectionHod]
  icon: [DepartmentConnectionIcon]
  id: [DepartmentConnectionId]
  name: [DepartmentConnectionName]
  parentDepartment: [DepartmentConnectionParentDepartment]
  updated_at: [DepartmentConnectionUpdated_at]
}

type Disposition {
  actions(limit: Int, sort: String, start: Int, where: JSON): [Action]
  color: String
  created_at: DateTime!
  departments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  description: String
  enabled: Boolean
  icon: String
  id: ID!
  isConclusive: Boolean
  ticketTypes(limit: Int, sort: String, start: Int, where: JSON): [Tickettype]
  title: String
  updated_at: DateTime!
}

type DispositionAggregator {
  count: Int
  totalCount: Int
}

type DispositionConnection {
  aggregate: DispositionAggregator
  groupBy: DispositionGroupBy
  values: [Disposition]
}

type DispositionConnectionColor {
  connection: DispositionConnection
  key: String
}

type DispositionConnectionCreated_at {
  connection: DispositionConnection
  key: DateTime
}

type DispositionConnectionDescription {
  connection: DispositionConnection
  key: String
}

type DispositionConnectionEnabled {
  connection: DispositionConnection
  key: Boolean
}

type DispositionConnectionIcon {
  connection: DispositionConnection
  key: String
}

type DispositionConnectionId {
  connection: DispositionConnection
  key: ID
}

type DispositionConnectionIsConclusive {
  connection: DispositionConnection
  key: Boolean
}

type DispositionConnectionTitle {
  connection: DispositionConnection
  key: String
}

type DispositionConnectionUpdated_at {
  connection: DispositionConnection
  key: DateTime
}

type DispositionGroupBy {
  color: [DispositionConnectionColor]
  created_at: [DispositionConnectionCreated_at]
  description: [DispositionConnectionDescription]
  enabled: [DispositionConnectionEnabled]
  icon: [DispositionConnectionIcon]
  id: [DispositionConnectionId]
  isConclusive: [DispositionConnectionIsConclusive]
  title: [DispositionConnectionTitle]
  updated_at: [DispositionConnectionUpdated_at]
}

type Emailaddress {
  address: String
  confirmed: Boolean
  contact: Contact
  created_at: DateTime!
  escalations(limit: Int, sort: String, start: Int, where: JSON): [Escalation]
  id: ID!
  inbox(limit: Int, sort: String, start: Int, where: JSON): [Message]
  sent(limit: Int, sort: String, start: Int, where: JSON): [Message]
  updated_at: DateTime!
}

type EmailaddressAggregator {
  count: Int
  totalCount: Int
}

type EmailaddressConnection {
  aggregate: EmailaddressAggregator
  groupBy: EmailaddressGroupBy
  values: [Emailaddress]
}

type EmailaddressConnectionAddress {
  connection: EmailaddressConnection
  key: String
}

type EmailaddressConnectionConfirmed {
  connection: EmailaddressConnection
  key: Boolean
}

type EmailaddressConnectionContact {
  connection: EmailaddressConnection
  key: ID
}

type EmailaddressConnectionCreated_at {
  connection: EmailaddressConnection
  key: DateTime
}

type EmailaddressConnectionId {
  connection: EmailaddressConnection
  key: ID
}

type EmailaddressConnectionUpdated_at {
  connection: EmailaddressConnection
  key: DateTime
}

type EmailaddressGroupBy {
  address: [EmailaddressConnectionAddress]
  confirmed: [EmailaddressConnectionConfirmed]
  contact: [EmailaddressConnectionContact]
  created_at: [EmailaddressConnectionCreated_at]
  id: [EmailaddressConnectionId]
  updated_at: [EmailaddressConnectionUpdated_at]
}

type Employee {
  assignedTickets(limit: Int, sort: String, start: Int, where: JSON): [Ticket]
  conversations(limit: Int, sort: String, start: Int, where: JSON): [Conversation]
  created_at: DateTime!
  departments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  hodOf: Department
  id: ID!
  inConversation: Conversation
  jobTitle: String
  number: String
  profile: Profile
  skills(limit: Int, sort: String, start: Int, where: JSON): [Skill]
  statusesLogs(limit: Int, sort: String, start: Int, where: JSON): [Statuslog]
  surveys(limit: Int, sort: String, start: Int, where: JSON): [Survey]
  team: Team
  teamLeaderOf: Team
  ticketsOpened(limit: Int, sort: String, start: Int, where: JSON): [Ticket]
  updated_at: DateTime!
}

type EmployeeAggregator {
  count: Int
  totalCount: Int
}

type EmployeeConnection {
  aggregate: EmployeeAggregator
  groupBy: EmployeeGroupBy
  values: [Employee]
}

type EmployeeConnectionCreated_at {
  connection: EmployeeConnection
  key: DateTime
}

type EmployeeConnectionHodOf {
  connection: EmployeeConnection
  key: ID
}

type EmployeeConnectionId {
  connection: EmployeeConnection
  key: ID
}

type EmployeeConnectionInConversation {
  connection: EmployeeConnection
  key: ID
}

type EmployeeConnectionJobTitle {
  connection: EmployeeConnection
  key: String
}

type EmployeeConnectionNumber {
  connection: EmployeeConnection
  key: String
}

type EmployeeConnectionProfile {
  connection: EmployeeConnection
  key: ID
}

type EmployeeConnectionTeam {
  connection: EmployeeConnection
  key: ID
}

type EmployeeConnectionTeamLeaderOf {
  connection: EmployeeConnection
  key: ID
}

type EmployeeConnectionUpdated_at {
  connection: EmployeeConnection
  key: DateTime
}

type EmployeeGroupBy {
  created_at: [EmployeeConnectionCreated_at]
  hodOf: [EmployeeConnectionHodOf]
  id: [EmployeeConnectionId]
  inConversation: [EmployeeConnectionInConversation]
  jobTitle: [EmployeeConnectionJobTitle]
  number: [EmployeeConnectionNumber]
  profile: [EmployeeConnectionProfile]
  team: [EmployeeConnectionTeam]
  teamLeaderOf: [EmployeeConnectionTeamLeaderOf]
  updated_at: [EmployeeConnectionUpdated_at]
}

type Escalation {
  created_at: DateTime!
  days: String
  department: Department
  emailAddresses(limit: Int, sort: String, start: Int, where: JSON): [Emailaddress]
  id: ID!
  label: String
  queryType: Querytype
  region: Region
  subQueryType: Querytype
  updated_at: DateTime!
}

type EscalationAggregator {
  count: Int
  totalCount: Int
}

type EscalationConnection {
  aggregate: EscalationAggregator
  groupBy: EscalationGroupBy
  values: [Escalation]
}

type EscalationConnectionCreated_at {
  connection: EscalationConnection
  key: DateTime
}

type EscalationConnectionDays {
  connection: EscalationConnection
  key: String
}

type EscalationConnectionDepartment {
  connection: EscalationConnection
  key: ID
}

type EscalationConnectionId {
  connection: EscalationConnection
  key: ID
}

type EscalationConnectionLabel {
  connection: EscalationConnection
  key: String
}

type EscalationConnectionQueryType {
  connection: EscalationConnection
  key: ID
}

type EscalationConnectionRegion {
  connection: EscalationConnection
  key: ID
}

type EscalationConnectionSubQueryType {
  connection: EscalationConnection
  key: ID
}

type EscalationConnectionUpdated_at {
  connection: EscalationConnection
  key: DateTime
}

type EscalationGroupBy {
  created_at: [EscalationConnectionCreated_at]
  days: [EscalationConnectionDays]
  department: [EscalationConnectionDepartment]
  id: [EscalationConnectionId]
  label: [EscalationConnectionLabel]
  queryType: [EscalationConnectionQueryType]
  region: [EscalationConnectionRegion]
  subQueryType: [EscalationConnectionSubQueryType]
  updated_at: [EscalationConnectionUpdated_at]
}

type ForgotPassword {
  ok: Boolean
}

type Log {
  action: String
  controller: String
  created_at: DateTime!
  id: ID!
  type: String
  updated_at: DateTime!
}

type LogAggregator {
  count: Int
  totalCount: Int
}

type LogConnection {
  aggregate: LogAggregator
  groupBy: LogGroupBy
  values: [Log]
}

type LogConnectionAction {
  connection: LogConnection
  key: String
}

type LogConnectionController {
  connection: LogConnection
  key: String
}

type LogConnectionCreated_at {
  connection: LogConnection
  key: DateTime
}

type LogConnectionId {
  connection: LogConnection
  key: ID
}

type LogConnectionType {
  connection: LogConnection
  key: String
}

type LogConnectionUpdated_at {
  connection: LogConnection
  key: DateTime
}

type LogGroupBy {
  action: [LogConnectionAction]
  controller: [LogConnectionController]
  created_at: [LogConnectionCreated_at]
  id: [LogConnectionId]
  type: [LogConnectionType]
  updated_at: [LogConnectionUpdated_at]
}

type Message {
  body: String
  chatConversation: Conversation
  created_at: DateTime!
  deletedAt: DateTime
  deliveredAt: DateTime
  emailConversation: Conversation
  faxConversation: Conversation
  fromEmail: Emailaddress
  fromPhone: Phonenumber
  id: ID!
  isInbound: Boolean
  readAt: DateTime
  smsConversation: Conversation
  subject: String
  toEmail: Emailaddress
  toPhone: Phonenumber
  updated_at: DateTime!
}

type MessageAggregator {
  count: Int
  totalCount: Int
}

type MessageConnection {
  aggregate: MessageAggregator
  groupBy: MessageGroupBy
  values: [Message]
}

type MessageConnectionBody {
  connection: MessageConnection
  key: String
}

type MessageConnectionChatConversation {
  connection: MessageConnection
  key: ID
}

type MessageConnectionCreated_at {
  connection: MessageConnection
  key: DateTime
}

type MessageConnectionDeletedAt {
  connection: MessageConnection
  key: DateTime
}

type MessageConnectionDeliveredAt {
  connection: MessageConnection
  key: DateTime
}

type MessageConnectionEmailConversation {
  connection: MessageConnection
  key: ID
}

type MessageConnectionFaxConversation {
  connection: MessageConnection
  key: ID
}

type MessageConnectionFromEmail {
  connection: MessageConnection
  key: ID
}

type MessageConnectionFromPhone {
  connection: MessageConnection
  key: ID
}

type MessageConnectionId {
  connection: MessageConnection
  key: ID
}

type MessageConnectionIsInbound {
  connection: MessageConnection
  key: Boolean
}

type MessageConnectionReadAt {
  connection: MessageConnection
  key: DateTime
}

type MessageConnectionSmsConversation {
  connection: MessageConnection
  key: ID
}

type MessageConnectionSubject {
  connection: MessageConnection
  key: String
}

type MessageConnectionToEmail {
  connection: MessageConnection
  key: ID
}

type MessageConnectionToPhone {
  connection: MessageConnection
  key: ID
}

type MessageConnectionUpdated_at {
  connection: MessageConnection
  key: DateTime
}

type MessageGroupBy {
  body: [MessageConnectionBody]
  chatConversation: [MessageConnectionChatConversation]
  created_at: [MessageConnectionCreated_at]
  deletedAt: [MessageConnectionDeletedAt]
  deliveredAt: [MessageConnectionDeliveredAt]
  emailConversation: [MessageConnectionEmailConversation]
  faxConversation: [MessageConnectionFaxConversation]
  fromEmail: [MessageConnectionFromEmail]
  fromPhone: [MessageConnectionFromPhone]
  id: [MessageConnectionId]
  isInbound: [MessageConnectionIsInbound]
  readAt: [MessageConnectionReadAt]
  smsConversation: [MessageConnectionSmsConversation]
  subject: [MessageConnectionSubject]
  toEmail: [MessageConnectionToEmail]
  toPhone: [MessageConnectionToPhone]
  updated_at: [MessageConnectionUpdated_at]
}

"This is used to record a call's routing misses, fails and voicemail against a phonenumber without creating a call entry for each trial. We can infer when a call rung and what happened to it when it or even it rung at all. Any resulting voicemail will be referred to by a flag and to retrieve it through the voicemail string in the call record."
type Missedcall {
  call: Call
  cancelledAt: DateTime
  created_at: DateTime!
  failedAt: DateTime
  hasVoicemail: Boolean
  id: ID!
  ignoredAt: DateTime
  log: String
  openedAt: DateTime
  phone: Phonenumber
  rejectedAt: DateTime
  updated_at: DateTime!
}

type MissedcallAggregator {
  count: Int
  totalCount: Int
}

type MissedcallConnection {
  aggregate: MissedcallAggregator
  groupBy: MissedcallGroupBy
  values: [Missedcall]
}

type MissedcallConnectionCall {
  connection: MissedcallConnection
  key: ID
}

type MissedcallConnectionCancelledAt {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallConnectionCreated_at {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallConnectionFailedAt {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallConnectionHasVoicemail {
  connection: MissedcallConnection
  key: Boolean
}

type MissedcallConnectionId {
  connection: MissedcallConnection
  key: ID
}

type MissedcallConnectionIgnoredAt {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallConnectionLog {
  connection: MissedcallConnection
  key: String
}

type MissedcallConnectionOpenedAt {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallConnectionPhone {
  connection: MissedcallConnection
  key: ID
}

type MissedcallConnectionRejectedAt {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallConnectionUpdated_at {
  connection: MissedcallConnection
  key: DateTime
}

type MissedcallGroupBy {
  call: [MissedcallConnectionCall]
  cancelledAt: [MissedcallConnectionCancelledAt]
  created_at: [MissedcallConnectionCreated_at]
  failedAt: [MissedcallConnectionFailedAt]
  hasVoicemail: [MissedcallConnectionHasVoicemail]
  id: [MissedcallConnectionId]
  ignoredAt: [MissedcallConnectionIgnoredAt]
  log: [MissedcallConnectionLog]
  openedAt: [MissedcallConnectionOpenedAt]
  phone: [MissedcallConnectionPhone]
  rejectedAt: [MissedcallConnectionRejectedAt]
  updated_at: [MissedcallConnectionUpdated_at]
}

type Mutation {
  callUpdateAddEvent(callSID: String, dir: String!, fromNum: String!, isSlim: Boolean, toNum: String!): Call
  changePassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createAccount(input: createAccountInput): createAccountPayload
  createAction(input: createActionInput): createActionPayload
  createAddress(input: createAddressInput): createAddressPayload
  createCall(input: createCallInput): createCallPayload
  createCampaign(input: createCampaignInput): createCampaignPayload
  createCity(input: createCityInput): createCityPayload
  createComment(input: createCommentInput): createCommentPayload
  createContact(input: createContactInput): createContactPayload
  createConversation(input: createConversationInput): createConversationPayload
  createCountry(input: createCountryInput): createCountryPayload
  createCustomer(input: createCustomerInput): createCustomerPayload
  createDepartment(input: createDepartmentInput): createDepartmentPayload
  createDisposition(input: createDispositionInput): createDispositionPayload
  createEmailaddress(input: createEmailaddressInput): createEmailaddressPayload
  createEmployee(input: createEmployeeInput): createEmployeePayload
  createEscalation(input: createEscalationInput): createEscalationPayload
  createLog(input: createLogInput): createLogPayload
  createMessage(input: createMessageInput): createMessagePayload
  createMissedcall(input: createMissedcallInput): createMissedcallPayload
  createPhonenumber(input: createPhonenumberInput): createPhonenumberPayload
  createPriority(input: createPriorityInput): createPriorityPayload
  createProfile(input: createProfileInput): createProfilePayload
  createQuerytype(input: createQuerytypeInput): createQuerytypePayload
  createRegion(input: createRegionInput): createRegionPayload
  "Create a new role"
  createRole(input: createRoleInput): createRolePayload
  createSettingsapi(input: createSettingsapiInput): createSettingsapiPayload
  createSettingsapp(input: createSettingsappInput): createSettingsappPayload
  createSettingsuser(input: createSettingsuserInput): createSettingsuserPayload
  createSkill(input: createSkillInput): createSkillPayload
  createSso(input: createSsoInput): createSsoPayload
  createStatus(input: createStatusInput): createStatusPayload
  createStatuslog(input: createStatuslogInput): createStatuslogPayload
  createStreet(input: createStreetInput): createStreetPayload
  createSuburb(input: createSuburbInput): createSuburbPayload
  createSurvey(input: createSurveyInput): createSurveyPayload
  createTeam(input: createTeamInput): createTeamPayload
  createTicket(input: createTicketInput): createTicketPayload
  createTickettype(input: createTickettypeInput): createTickettypePayload
  "Create a new user"
  createUser(input: createUserInput): createUserPayload
  deleteAccount(input: deleteAccountInput): deleteAccountPayload
  deleteAction(input: deleteActionInput): deleteActionPayload
  deleteAddress(input: deleteAddressInput): deleteAddressPayload
  deleteAllStatuses: deleteStatusPayload
  deleteCall(input: deleteCallInput): deleteCallPayload
  deleteCampaign(input: deleteCampaignInput): deleteCampaignPayload
  deleteCity(input: deleteCityInput): deleteCityPayload
  deleteComment(input: deleteCommentInput): deleteCommentPayload
  deleteContact(input: deleteContactInput): deleteContactPayload
  deleteConversation(input: deleteConversationInput): deleteConversationPayload
  deleteCountry(input: deleteCountryInput): deleteCountryPayload
  deleteCustomer(input: deleteCustomerInput): deleteCustomerPayload
  deleteDepartment(input: deleteDepartmentInput): deleteDepartmentPayload
  deleteDisposition(input: deleteDispositionInput): deleteDispositionPayload
  deleteEmailaddress(input: deleteEmailaddressInput): deleteEmailaddressPayload
  deleteEmployee(input: deleteEmployeeInput): deleteEmployeePayload
  deleteEscalation(input: deleteEscalationInput): deleteEscalationPayload
  deleteLog(input: deleteLogInput): deleteLogPayload
  deleteMessage(input: deleteMessageInput): deleteMessagePayload
  deleteMissedcall(input: deleteMissedcallInput): deleteMissedcallPayload
  deletePhonenumber(input: deletePhonenumberInput): deletePhonenumberPayload
  deletePriority(input: deletePriorityInput): deletePriorityPayload
  deleteProfile(input: deleteProfileInput): deleteProfilePayload
  deleteQuerytype(input: deleteQuerytypeInput): deleteQuerytypePayload
  deleteRegion(input: deleteRegionInput): deleteRegionPayload
  "Delete an existing role"
  deleteRole(input: deleteRoleInput): deleteRolePayload
  deleteSettingsapi(input: deleteSettingsapiInput): deleteSettingsapiPayload
  deleteSettingsapp(input: deleteSettingsappInput): deleteSettingsappPayload
  deleteSettingsuser(input: deleteSettingsuserInput): deleteSettingsuserPayload
  deleteSkill(input: deleteSkillInput): deleteSkillPayload
  deleteSso(input: deleteSsoInput): deleteSsoPayload
  deleteStatus(input: deleteStatusInput): deleteStatusPayload
  deleteStatuslog(input: deleteStatuslogInput): deleteStatuslogPayload
  deleteStreet(input: deleteStreetInput): deleteStreetPayload
  deleteSuburb(input: deleteSuburbInput): deleteSuburbPayload
  deleteSurvey(input: deleteSurveyInput): deleteSurveyPayload
  deleteTeam(input: deleteTeamInput): deleteTeamPayload
  deleteTicket(input: deleteTicketInput): deleteTicketPayload
  deleteTickettype(input: deleteTickettypeInput): deleteTickettypePayload
  "Delete an existing user"
  deleteUser(input: deleteUserInput): deleteUserPayload
  eavesdrop(agentExtension: String!, callSID: String!, extension: String!, otherParty: String!): Message
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  forgotPassword(email: String!): ForgotPassword
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
  register(input: UserInput!): UsersPermissionsLoginPayload!
  ssoauth: UsersPermissionsLoginPayload
  updateAccount(input: updateAccountInput): updateAccountPayload
  updateAction(input: updateActionInput): updateActionPayload
  updateAddress(input: updateAddressInput): updateAddressPayload
  updateCall(input: updateCallInput): updateCallPayload
  updateCampaign(input: updateCampaignInput): updateCampaignPayload
  updateCity(input: updateCityInput): updateCityPayload
  updateComment(input: updateCommentInput): updateCommentPayload
  updateContact(input: updateContactInput): updateContactPayload
  updateConversation(input: updateConversationInput): updateConversationPayload
  updateCountry(input: updateCountryInput): updateCountryPayload
  updateCustomer(input: updateCustomerInput): updateCustomerPayload
  updateDepartment(input: updateDepartmentInput): updateDepartmentPayload
  updateDisposition(input: updateDispositionInput): updateDispositionPayload
  updateEmailaddress(input: updateEmailaddressInput): updateEmailaddressPayload
  updateEmployee(input: updateEmployeeInput): updateEmployeePayload
  updateEscalation(input: updateEscalationInput): updateEscalationPayload
  updateLog(input: updateLogInput): updateLogPayload
  updateMessage(input: updateMessageInput): updateMessagePayload
  updateMissedcall(input: updateMissedcallInput): updateMissedcallPayload
  updatePhonenumber(input: updatePhonenumberInput): updatePhonenumberPayload
  updatePriority(input: updatePriorityInput): updatePriorityPayload
  updateProfile(input: updateProfileInput): updateProfilePayload
  updateQuerytype(input: updateQuerytypeInput): updateQuerytypePayload
  updateRegion(input: updateRegionInput): updateRegionPayload
  "Update an existing role"
  updateRole(input: updateRoleInput): updateRolePayload
  updateSettingsapi(input: updateSettingsapiInput): updateSettingsapiPayload
  updateSettingsapp(input: updateSettingsappInput): updateSettingsappPayload
  updateSettingsuser(input: updateSettingsuserInput): updateSettingsuserPayload
  updateSkill(input: updateSkillInput): updateSkillPayload
  updateSso(input: updateSsoInput): updateSsoPayload
  updateStatus(input: updateStatusInput): updateStatusPayload
  updateStatuslog(input: updateStatuslogInput): updateStatuslogPayload
  updateStreet(input: updateStreetInput): updateStreetPayload
  updateSuburb(input: updateSuburbInput): updateSuburbPayload
  updateSurvey(input: updateSurveyInput): updateSurveyPayload
  updateTeam(input: updateTeamInput): updateTeamPayload
  updateTicket(input: updateTicketInput): updateTicketPayload
  updateTickettype(input: updateTickettypeInput): updateTickettypePayload
  "Update an existing user"
  updateUser(input: updateUserInput): updateUserPayload
  upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Phonenumber {
  confirmed: Boolean
  contact: Contact
  created_at: DateTime!
  domain: String
  id: ID!
  inboundCalls(limit: Int, sort: String, start: Int, where: JSON): [Call]
  inbox(limit: Int, sort: String, start: Int, where: JSON): [Message]
  kind: ENUM_PHONENUMBER_KIND
  latestCall: Call
  missedCalls(limit: Int, sort: String, start: Int, where: JSON): [Missedcall]
  number: String
  outboundCalls(limit: Int, sort: String, start: Int, where: JSON): [Call]
  sent(limit: Int, sort: String, start: Int, where: JSON): [Message]
  updated_at: DateTime!
}

type PhonenumberAggregator {
  count: Int
  totalCount: Int
}

type PhonenumberConnection {
  aggregate: PhonenumberAggregator
  groupBy: PhonenumberGroupBy
  values: [Phonenumber]
}

type PhonenumberConnectionConfirmed {
  connection: PhonenumberConnection
  key: Boolean
}

type PhonenumberConnectionContact {
  connection: PhonenumberConnection
  key: ID
}

type PhonenumberConnectionCreated_at {
  connection: PhonenumberConnection
  key: DateTime
}

type PhonenumberConnectionDomain {
  connection: PhonenumberConnection
  key: String
}

type PhonenumberConnectionId {
  connection: PhonenumberConnection
  key: ID
}

type PhonenumberConnectionKind {
  connection: PhonenumberConnection
  key: String
}

type PhonenumberConnectionLatestCall {
  connection: PhonenumberConnection
  key: ID
}

type PhonenumberConnectionNumber {
  connection: PhonenumberConnection
  key: String
}

type PhonenumberConnectionUpdated_at {
  connection: PhonenumberConnection
  key: DateTime
}

type PhonenumberGroupBy {
  confirmed: [PhonenumberConnectionConfirmed]
  contact: [PhonenumberConnectionContact]
  created_at: [PhonenumberConnectionCreated_at]
  domain: [PhonenumberConnectionDomain]
  id: [PhonenumberConnectionId]
  kind: [PhonenumberConnectionKind]
  latestCall: [PhonenumberConnectionLatestCall]
  number: [PhonenumberConnectionNumber]
  updated_at: [PhonenumberConnectionUpdated_at]
}

type Phonenumberkind {
  kind: String
}

type Priority {
  color: String
  created_at: DateTime!
  icon: String
  id: ID!
  label: String
  level: Int!
  updated_at: DateTime!
}

type PriorityAggregator {
  count: Int
  totalCount: Int
}

type PriorityConnection {
  aggregate: PriorityAggregator
  groupBy: PriorityGroupBy
  values: [Priority]
}

type PriorityConnectionColor {
  connection: PriorityConnection
  key: String
}

type PriorityConnectionCreated_at {
  connection: PriorityConnection
  key: DateTime
}

type PriorityConnectionIcon {
  connection: PriorityConnection
  key: String
}

type PriorityConnectionId {
  connection: PriorityConnection
  key: ID
}

type PriorityConnectionLabel {
  connection: PriorityConnection
  key: String
}

type PriorityConnectionLevel {
  connection: PriorityConnection
  key: Int
}

type PriorityConnectionUpdated_at {
  connection: PriorityConnection
  key: DateTime
}

type PriorityGroupBy {
  color: [PriorityConnectionColor]
  created_at: [PriorityConnectionCreated_at]
  icon: [PriorityConnectionIcon]
  id: [PriorityConnectionId]
  label: [PriorityConnectionLabel]
  level: [PriorityConnectionLevel]
  updated_at: [PriorityConnectionUpdated_at]
}

type Profile {
  about: String
  avatar: UploadFile
  contact: Contact
  created_at: DateTime!
  dob: DateTime
  employment: Employee
  firstname: String
  id: ID!
  lastname: String
  middlename: String
  natID: String
  passportNum: String
  patronage: Customer
  rating: Float
  sex: ENUM_PROFILE_SEX
  updated_at: DateTime!
  user: UsersPermissionsUser
}

type ProfileAggregator {
  avg: ProfileAggregatorAvg
  count: Int
  max: ProfileAggregatorMax
  min: ProfileAggregatorMin
  sum: ProfileAggregatorSum
  totalCount: Int
}

type ProfileAggregatorAvg {
  rating: Float
}

type ProfileAggregatorMax {
  rating: Float
}

type ProfileAggregatorMin {
  rating: Float
}

type ProfileAggregatorSum {
  rating: Float
}

type ProfileConnection {
  aggregate: ProfileAggregator
  groupBy: ProfileGroupBy
  values: [Profile]
}

type ProfileConnectionAbout {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionAvatar {
  connection: ProfileConnection
  key: ID
}

type ProfileConnectionContact {
  connection: ProfileConnection
  key: ID
}

type ProfileConnectionCreated_at {
  connection: ProfileConnection
  key: DateTime
}

type ProfileConnectionDob {
  connection: ProfileConnection
  key: DateTime
}

type ProfileConnectionEmployment {
  connection: ProfileConnection
  key: ID
}

type ProfileConnectionFirstname {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionId {
  connection: ProfileConnection
  key: ID
}

type ProfileConnectionLastname {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionMiddlename {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionNatID {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionPassportNum {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionPatronage {
  connection: ProfileConnection
  key: ID
}

type ProfileConnectionRating {
  connection: ProfileConnection
  key: Float
}

type ProfileConnectionSex {
  connection: ProfileConnection
  key: String
}

type ProfileConnectionUpdated_at {
  connection: ProfileConnection
  key: DateTime
}

type ProfileConnectionUser {
  connection: ProfileConnection
  key: ID
}

type ProfileGroupBy {
  about: [ProfileConnectionAbout]
  avatar: [ProfileConnectionAvatar]
  contact: [ProfileConnectionContact]
  created_at: [ProfileConnectionCreated_at]
  dob: [ProfileConnectionDob]
  employment: [ProfileConnectionEmployment]
  firstname: [ProfileConnectionFirstname]
  id: [ProfileConnectionId]
  lastname: [ProfileConnectionLastname]
  middlename: [ProfileConnectionMiddlename]
  natID: [ProfileConnectionNatID]
  passportNum: [ProfileConnectionPassportNum]
  patronage: [ProfileConnectionPatronage]
  rating: [ProfileConnectionRating]
  sex: [ProfileConnectionSex]
  updated_at: [ProfileConnectionUpdated_at]
  user: [ProfileConnectionUser]
}

type Query {
  account(id: ID!): Account
  accounts(limit: Int, sort: String, start: Int, where: JSON): [Account]
  accountsConnection(limit: Int, sort: String, start: Int, where: JSON): AccountConnection
  action(id: ID!): Action
  actions(limit: Int, sort: String, start: Int, where: JSON): [Action]
  actionsConnection(limit: Int, sort: String, start: Int, where: JSON): ActionConnection
  address(id: ID!): Address
  addresses(limit: Int, sort: String, start: Int, where: JSON): [Address]
  addressesConnection(limit: Int, sort: String, start: Int, where: JSON): AddressConnection
  avg(field: String!, model: String!, query: JSON): AggregationAvg
  call(id: ID!): Call
  callEngageEvent(callSID: String, isSlim: Boolean): Call
  callOr(where: JSON): Call
  calls(limit: Int, sort: String, start: Int, where: JSON): [Call]
  callsConnection(limit: Int, sort: String, start: Int, where: JSON): CallConnection
  callsOr(limit: Int, sort: String, start: Int, where: JSON): [Call]
  campaign(id: ID!): Campaign
  campaigns(limit: Int, sort: String, start: Int, where: JSON): [Campaign]
  campaignsConnection(limit: Int, sort: String, start: Int, where: JSON): CampaignConnection
  cities(limit: Int, sort: String, start: Int, where: JSON): [City]
  citiesConnection(limit: Int, sort: String, start: Int, where: JSON): CityConnection
  city(id: ID!): City
  comment(id: ID!): Comment
  comments(limit: Int, sort: String, start: Int, where: JSON): [Comment]
  commentsConnection(limit: Int, sort: String, start: Int, where: JSON): CommentConnection
  contact(id: ID!): Contact
  contacts(limit: Int, sort: String, start: Int, where: JSON): [Contact]
  contactsConnection(limit: Int, sort: String, start: Int, where: JSON): ContactConnection
  conversation(id: ID!): Conversation
  conversations(limit: Int, sort: String, start: Int, where: JSON): [Conversation]
  conversationsConnection(limit: Int, sort: String, start: Int, where: JSON): ConversationConnection
  count(model: String!, query: JSON): AggregationCount
  countries(limit: Int, sort: String, start: Int, where: JSON): [Country]
  countriesConnection(limit: Int, sort: String, start: Int, where: JSON): CountryConnection
  country(id: ID!): Country
  customer(id: ID!): Customer
  customers(limit: Int, sort: String, start: Int, where: JSON): [Customer]
  customersConnection(limit: Int, sort: String, start: Int, where: JSON): CustomerConnection
  department(id: ID!): Department
  departments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  departmentsConnection(limit: Int, sort: String, start: Int, where: JSON): DepartmentConnection
  disposition(id: ID!): Disposition
  dispositions(limit: Int, sort: String, start: Int, where: JSON): [Disposition]
  dispositionsConnection(limit: Int, sort: String, start: Int, where: JSON): DispositionConnection
  emailaddress(id: ID!): Emailaddress
  emailaddresses(limit: Int, sort: String, start: Int, where: JSON): [Emailaddress]
  emailaddressesConnection(limit: Int, sort: String, start: Int, where: JSON): EmailaddressConnection
  employee(id: ID!): Employee
  employees(limit: Int, sort: String, start: Int, where: JSON): [Employee]
  employeesConnection(limit: Int, sort: String, start: Int, where: JSON): EmployeeConnection
  escalation(id: ID!): Escalation
  escalations(limit: Int, sort: String, start: Int, where: JSON): [Escalation]
  escalationsConnection(limit: Int, sort: String, start: Int, where: JSON): EscalationConnection
  files(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
  filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
  getPhonenumberKind(number: String!): Phonenumberkind
  log(id: ID!): Log
  logs(limit: Int, sort: String, start: Int, where: JSON): [Log]
  logsConnection(limit: Int, sort: String, start: Int, where: JSON): LogConnection
  me: UsersPermissionsMe
  message(id: ID!): Message
  messages(limit: Int, sort: String, start: Int, where: JSON): [Message]
  messagesConnection(limit: Int, sort: String, start: Int, where: JSON): MessageConnection
  messagesOr(limit: Int, sort: String, start: Int, where: JSON): [Message]
  missedcall(id: ID!): Missedcall
  missedcalls(limit: Int, sort: String, start: Int, where: JSON): [Missedcall]
  missedcallsConnection(limit: Int, sort: String, start: Int, where: JSON): MissedcallConnection
  orFind(limit: Int, model: String, plugin: String, sort: String, start: Int, where: JSON): [Morph]
  phonenumber(id: ID!): Phonenumber
  phonenumbers(limit: Int, sort: String, start: Int, where: JSON): [Phonenumber]
  phonenumbersConnection(limit: Int, sort: String, start: Int, where: JSON): PhonenumberConnection
  priorities(limit: Int, sort: String, start: Int, where: JSON): [Priority]
  prioritiesConnection(limit: Int, sort: String, start: Int, where: JSON): PriorityConnection
  priority(id: ID!): Priority
  profile(id: ID!): Profile
  profiles(limit: Int, sort: String, start: Int, where: JSON): [Profile]
  profilesConnection(limit: Int, sort: String, start: Int, where: JSON): ProfileConnection
  querytype(id: ID!): Querytype
  querytypes(limit: Int, sort: String, start: Int, where: JSON): [Querytype]
  querytypesConnection(limit: Int, sort: String, start: Int, where: JSON): QuerytypeConnection
  region(id: ID!): Region
  regions(limit: Int, sort: String, start: Int, where: JSON): [Region]
  regionsConnection(limit: Int, sort: String, start: Int, where: JSON): RegionConnection
  role(id: ID!): UsersPermissionsRole
  "Retrieve all the existing roles. You can't apply filters on this query."
  roles(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
  rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
  settingsapi(id: ID!): Settingsapi
  settingsapis(limit: Int, sort: String, start: Int, where: JSON): [Settingsapi]
  settingsapisConnection(limit: Int, sort: String, start: Int, where: JSON): SettingsapiConnection
  settingsapp(id: ID!): Settingsapp
  settingsapps(limit: Int, sort: String, start: Int, where: JSON): [Settingsapp]
  settingsappsConnection(limit: Int, sort: String, start: Int, where: JSON): SettingsappConnection
  settingsuser(id: ID!): Settingsuser
  settingsusers(limit: Int, sort: String, start: Int, where: JSON): [Settingsuser]
  settingsusersConnection(limit: Int, sort: String, start: Int, where: JSON): SettingsuserConnection
  skill(id: ID!): Skill
  skills(limit: Int, sort: String, start: Int, where: JSON): [Skill]
  skillsConnection(limit: Int, sort: String, start: Int, where: JSON): SkillConnection
  sso(id: ID!): Sso
  ssos(limit: Int, sort: String, start: Int, where: JSON): [Sso]
  ssosConnection(limit: Int, sort: String, start: Int, where: JSON): SsoConnection
  status(id: ID!): Status
  statuses(limit: Int, sort: String, start: Int, where: JSON): [Status]
  statusesConnection(limit: Int, sort: String, start: Int, where: JSON): StatusConnection
  statuslog(id: ID!): Statuslog
  statuslogs(limit: Int, sort: String, start: Int, where: JSON): [Statuslog]
  statuslogsConnection(limit: Int, sort: String, start: Int, where: JSON): StatuslogConnection
  street(id: ID!): Street
  streets(limit: Int, sort: String, start: Int, where: JSON): [Street]
  streetsConnection(limit: Int, sort: String, start: Int, where: JSON): StreetConnection
  suburb(id: ID!): Suburb
  suburbs(limit: Int, sort: String, start: Int, where: JSON): [Suburb]
  suburbsConnection(limit: Int, sort: String, start: Int, where: JSON): SuburbConnection
  survey(id: ID!): Survey
  surveys(limit: Int, sort: String, start: Int, where: JSON): [Survey]
  surveysConnection(limit: Int, sort: String, start: Int, where: JSON): SurveyConnection
  team(id: ID!): Team
  teams(limit: Int, sort: String, start: Int, where: JSON): [Team]
  teamsConnection(limit: Int, sort: String, start: Int, where: JSON): TeamConnection
  ticket(id: ID!): Ticket
  tickets(limit: Int, sort: String, start: Int, where: JSON): [Ticket]
  ticketsConnection(limit: Int, sort: String, start: Int, where: JSON): TicketConnection
  tickettype(id: ID!): Tickettype
  tickettypes(limit: Int, sort: String, start: Int, where: JSON): [Tickettype]
  tickettypesConnection(limit: Int, sort: String, start: Int, where: JSON): TickettypeConnection
  user(id: ID!): UsersPermissionsUser
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
  usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type Querytype {
  color: String
  created_at: DateTime!
  departments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  escalations(limit: Int, sort: String, start: Int, where: JSON): [Escalation]
  icon: String
  id: ID!
  label: String
  parentQueryTypes(limit: Int, sort: String, start: Int, where: JSON): [Querytype]
  subQueryTypes(limit: Int, sort: String, start: Int, where: JSON): [Querytype]
  ticketFields: JSON
  ticketTypes(limit: Int, sort: String, start: Int, where: JSON): [Tickettype]
  updated_at: DateTime!
}

type QuerytypeAggregator {
  count: Int
  totalCount: Int
}

type QuerytypeConnection {
  aggregate: QuerytypeAggregator
  groupBy: QuerytypeGroupBy
  values: [Querytype]
}

type QuerytypeConnectionColor {
  connection: QuerytypeConnection
  key: String
}

type QuerytypeConnectionCreated_at {
  connection: QuerytypeConnection
  key: DateTime
}

type QuerytypeConnectionIcon {
  connection: QuerytypeConnection
  key: String
}

type QuerytypeConnectionId {
  connection: QuerytypeConnection
  key: ID
}

type QuerytypeConnectionLabel {
  connection: QuerytypeConnection
  key: String
}

type QuerytypeConnectionTicketFields {
  connection: QuerytypeConnection
  key: JSON
}

type QuerytypeConnectionUpdated_at {
  connection: QuerytypeConnection
  key: DateTime
}

type QuerytypeGroupBy {
  color: [QuerytypeConnectionColor]
  created_at: [QuerytypeConnectionCreated_at]
  icon: [QuerytypeConnectionIcon]
  id: [QuerytypeConnectionId]
  label: [QuerytypeConnectionLabel]
  ticketFields: [QuerytypeConnectionTicketFields]
  updated_at: [QuerytypeConnectionUpdated_at]
}

type Region {
  created_at: DateTime!
  departments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  id: ID!
  name: String
  ticketTypes(limit: Int, sort: String, start: Int, where: JSON): [Tickettype]
  updated_at: DateTime!
}

type RegionAggregator {
  count: Int
  totalCount: Int
}

type RegionConnection {
  aggregate: RegionAggregator
  groupBy: RegionGroupBy
  values: [Region]
}

type RegionConnectionCreated_at {
  connection: RegionConnection
  key: DateTime
}

type RegionConnectionId {
  connection: RegionConnection
  key: ID
}

type RegionConnectionName {
  connection: RegionConnection
  key: String
}

type RegionConnectionUpdated_at {
  connection: RegionConnection
  key: DateTime
}

type RegionGroupBy {
  created_at: [RegionConnectionCreated_at]
  id: [RegionConnectionId]
  name: [RegionConnectionName]
  updated_at: [RegionConnectionUpdated_at]
}

"Aivir api settings cache. Contains api app settings. Each attribute in the model represents a setting and the collection will just have one record."
type Settingsapi {
  apiServerHost: String
  apiServerPort: String
  created_at: DateTime!
  id: ID!
  inboundCallESLPort: String
  phonenumberKindRules: JSON
  sipDomain: String
  sipHost: String
  sipPort: String
  sipProtocol: String
  switchCallRecording: String
  switchPath: String
  switchVoicemail: String
  updated_at: DateTime!
}

type SettingsapiAggregator {
  count: Int
  totalCount: Int
}

type SettingsapiConnection {
  aggregate: SettingsapiAggregator
  groupBy: SettingsapiGroupBy
  values: [Settingsapi]
}

type SettingsapiConnectionApiServerHost {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionApiServerPort {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionCreated_at {
  connection: SettingsapiConnection
  key: DateTime
}

type SettingsapiConnectionId {
  connection: SettingsapiConnection
  key: ID
}

type SettingsapiConnectionInboundCallESLPort {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionPhonenumberKindRules {
  connection: SettingsapiConnection
  key: JSON
}

type SettingsapiConnectionSipDomain {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionSipHost {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionSipPort {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionSipProtocol {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionSwitchCallRecording {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionSwitchPath {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionSwitchVoicemail {
  connection: SettingsapiConnection
  key: String
}

type SettingsapiConnectionUpdated_at {
  connection: SettingsapiConnection
  key: DateTime
}

type SettingsapiGroupBy {
  apiServerHost: [SettingsapiConnectionApiServerHost]
  apiServerPort: [SettingsapiConnectionApiServerPort]
  created_at: [SettingsapiConnectionCreated_at]
  id: [SettingsapiConnectionId]
  inboundCallESLPort: [SettingsapiConnectionInboundCallESLPort]
  phonenumberKindRules: [SettingsapiConnectionPhonenumberKindRules]
  sipDomain: [SettingsapiConnectionSipDomain]
  sipHost: [SettingsapiConnectionSipHost]
  sipPort: [SettingsapiConnectionSipPort]
  sipProtocol: [SettingsapiConnectionSipProtocol]
  switchCallRecording: [SettingsapiConnectionSwitchCallRecording]
  switchPath: [SettingsapiConnectionSwitchPath]
  switchVoicemail: [SettingsapiConnectionSwitchVoicemail]
  updated_at: [SettingsapiConnectionUpdated_at]
}

"Aivir app settings cache. Contains frontend app settings. Each attribute in the model represents a setting and the collection will just have one record. Settings are retrieved ans subscribed to via graphql."
type Settingsapp {
  appCaption: String
  appIcon: String
  appLogo: String
  appName: String
  created_at: DateTime!
  devLogo: String
  devName: String
  id: ID!
  initialAutoStatusChangeTimeout: Int
  orgCaption: String
  orgLogo: String
  orgName: String
  "Either hide, show, or disable elements that a user is not allowed to interact with."
  unauthorizedElements: String
  updated_at: DateTime!
}

type SettingsappAggregator {
  avg: SettingsappAggregatorAvg
  count: Int
  max: SettingsappAggregatorMax
  min: SettingsappAggregatorMin
  sum: SettingsappAggregatorSum
  totalCount: Int
}

type SettingsappAggregatorAvg {
  initialAutoStatusChangeTimeout: Float
}

type SettingsappAggregatorMax {
  initialAutoStatusChangeTimeout: Float
}

type SettingsappAggregatorMin {
  initialAutoStatusChangeTimeout: Float
}

type SettingsappAggregatorSum {
  initialAutoStatusChangeTimeout: Float
}

type SettingsappConnection {
  aggregate: SettingsappAggregator
  groupBy: SettingsappGroupBy
  values: [Settingsapp]
}

type SettingsappConnectionAppCaption {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionAppIcon {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionAppLogo {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionAppName {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionCreated_at {
  connection: SettingsappConnection
  key: DateTime
}

type SettingsappConnectionDevLogo {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionDevName {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionId {
  connection: SettingsappConnection
  key: ID
}

type SettingsappConnectionInitialAutoStatusChangeTimeout {
  connection: SettingsappConnection
  key: Int
}

type SettingsappConnectionOrgCaption {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionOrgLogo {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionOrgName {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionUnauthorizedElements {
  connection: SettingsappConnection
  key: String
}

type SettingsappConnectionUpdated_at {
  connection: SettingsappConnection
  key: DateTime
}

type SettingsappGroupBy {
  appCaption: [SettingsappConnectionAppCaption]
  appIcon: [SettingsappConnectionAppIcon]
  appLogo: [SettingsappConnectionAppLogo]
  appName: [SettingsappConnectionAppName]
  created_at: [SettingsappConnectionCreated_at]
  devLogo: [SettingsappConnectionDevLogo]
  devName: [SettingsappConnectionDevName]
  id: [SettingsappConnectionId]
  initialAutoStatusChangeTimeout: [SettingsappConnectionInitialAutoStatusChangeTimeout]
  orgCaption: [SettingsappConnectionOrgCaption]
  orgLogo: [SettingsappConnectionOrgLogo]
  orgName: [SettingsappConnectionOrgName]
  unauthorizedElements: [SettingsappConnectionUnauthorizedElements]
  updated_at: [SettingsappConnectionUpdated_at]
}

"Aivir user settings cache. Contains user app settings. Each attribute in the model represents a setting and the collection will just have one record for each user. Each record is associated with a user account."
type Settingsuser {
  created_at: DateTime!
  id: ID!
  updated_at: DateTime!
  user: UsersPermissionsUser
}

type SettingsuserAggregator {
  count: Int
  totalCount: Int
}

type SettingsuserConnection {
  aggregate: SettingsuserAggregator
  groupBy: SettingsuserGroupBy
  values: [Settingsuser]
}

type SettingsuserConnectionCreated_at {
  connection: SettingsuserConnection
  key: DateTime
}

type SettingsuserConnectionId {
  connection: SettingsuserConnection
  key: ID
}

type SettingsuserConnectionUpdated_at {
  connection: SettingsuserConnection
  key: DateTime
}

type SettingsuserConnectionUser {
  connection: SettingsuserConnection
  key: ID
}

type SettingsuserGroupBy {
  created_at: [SettingsuserConnectionCreated_at]
  id: [SettingsuserConnectionId]
  updated_at: [SettingsuserConnectionUpdated_at]
  user: [SettingsuserConnectionUser]
}

type Skill {
  created_at: DateTime!
  employees(limit: Int, sort: String, start: Int, where: JSON): [Employee]
  id: ID!
  level: Int
  title: String
  updated_at: DateTime!
}

type SkillAggregator {
  avg: SkillAggregatorAvg
  count: Int
  max: SkillAggregatorMax
  min: SkillAggregatorMin
  sum: SkillAggregatorSum
  totalCount: Int
}

type SkillAggregatorAvg {
  level: Float
}

type SkillAggregatorMax {
  level: Float
}

type SkillAggregatorMin {
  level: Float
}

type SkillAggregatorSum {
  level: Float
}

type SkillConnection {
  aggregate: SkillAggregator
  groupBy: SkillGroupBy
  values: [Skill]
}

type SkillConnectionCreated_at {
  connection: SkillConnection
  key: DateTime
}

type SkillConnectionId {
  connection: SkillConnection
  key: ID
}

type SkillConnectionLevel {
  connection: SkillConnection
  key: Int
}

type SkillConnectionTitle {
  connection: SkillConnection
  key: String
}

type SkillConnectionUpdated_at {
  connection: SkillConnection
  key: DateTime
}

type SkillGroupBy {
  created_at: [SkillConnectionCreated_at]
  id: [SkillConnectionId]
  level: [SkillConnectionLevel]
  title: [SkillConnectionTitle]
  updated_at: [SkillConnectionUpdated_at]
}

type Sso {
  created_at: DateTime!
  id: ID!
  updated_at: DateTime!
}

type SsoAggregator {
  count: Int
  totalCount: Int
}

type SsoConnection {
  aggregate: SsoAggregator
  groupBy: SsoGroupBy
  values: [Sso]
}

type SsoConnectionCreated_at {
  connection: SsoConnection
  key: DateTime
}

type SsoConnectionId {
  connection: SsoConnection
  key: ID
}

type SsoConnectionUpdated_at {
  connection: SsoConnection
  key: DateTime
}

type SsoGroupBy {
  created_at: [SsoConnectionCreated_at]
  id: [SsoConnectionId]
  updated_at: [SsoConnectionUpdated_at]
}

type Status {
  autoTimeout: Int
  bgColor: String
  caption: String
  color: String
  created_at: DateTime!
  fsState: ENUM_STATUS_FSSTATE
  fsStatus: ENUM_STATUS_FSSTATUS
  icon: String
  id: ID!
  isOnline: Boolean
  label: String
  nextStatus: Status
  onBusyWith: ENUM_STATUS_ONBUSYWITH
  prevStatus: Status
  showInOpts: Boolean
  slug: String
  updated_at: DateTime!
}

type StatusAggregator {
  avg: StatusAggregatorAvg
  count: Int
  max: StatusAggregatorMax
  min: StatusAggregatorMin
  sum: StatusAggregatorSum
  totalCount: Int
}

type StatusAggregatorAvg {
  autoTimeout: Float
}

type StatusAggregatorMax {
  autoTimeout: Float
}

type StatusAggregatorMin {
  autoTimeout: Float
}

type StatusAggregatorSum {
  autoTimeout: Float
}

type StatusConnection {
  aggregate: StatusAggregator
  groupBy: StatusGroupBy
  values: [Status]
}

type StatusConnectionAutoTimeout {
  connection: StatusConnection
  key: Int
}

type StatusConnectionBgColor {
  connection: StatusConnection
  key: String
}

type StatusConnectionCaption {
  connection: StatusConnection
  key: String
}

type StatusConnectionColor {
  connection: StatusConnection
  key: String
}

type StatusConnectionCreated_at {
  connection: StatusConnection
  key: DateTime
}

type StatusConnectionFsState {
  connection: StatusConnection
  key: String
}

type StatusConnectionFsStatus {
  connection: StatusConnection
  key: String
}

type StatusConnectionIcon {
  connection: StatusConnection
  key: String
}

type StatusConnectionId {
  connection: StatusConnection
  key: ID
}

type StatusConnectionIsOnline {
  connection: StatusConnection
  key: Boolean
}

type StatusConnectionLabel {
  connection: StatusConnection
  key: String
}

type StatusConnectionNextStatus {
  connection: StatusConnection
  key: ID
}

type StatusConnectionOnBusyWith {
  connection: StatusConnection
  key: String
}

type StatusConnectionPrevStatus {
  connection: StatusConnection
  key: ID
}

type StatusConnectionShowInOpts {
  connection: StatusConnection
  key: Boolean
}

type StatusConnectionSlug {
  connection: StatusConnection
  key: String
}

type StatusConnectionUpdated_at {
  connection: StatusConnection
  key: DateTime
}

type StatusGroupBy {
  autoTimeout: [StatusConnectionAutoTimeout]
  bgColor: [StatusConnectionBgColor]
  caption: [StatusConnectionCaption]
  color: [StatusConnectionColor]
  created_at: [StatusConnectionCreated_at]
  fsState: [StatusConnectionFsState]
  fsStatus: [StatusConnectionFsStatus]
  icon: [StatusConnectionIcon]
  id: [StatusConnectionId]
  isOnline: [StatusConnectionIsOnline]
  label: [StatusConnectionLabel]
  nextStatus: [StatusConnectionNextStatus]
  onBusyWith: [StatusConnectionOnBusyWith]
  prevStatus: [StatusConnectionPrevStatus]
  showInOpts: [StatusConnectionShowInOpts]
  slug: [StatusConnectionSlug]
  updated_at: [StatusConnectionUpdated_at]
}

"Log keeping of status changes"
type Statuslog {
  created_at: DateTime!
  cumulativeDuration: Long
  employee: Employee
  id: ID!
  prevStatus: Status
  prevStatusDuration: Long
  status: Status
  updated_at: DateTime!
}

type StatuslogAggregator {
  count: Int
  totalCount: Int
}

type StatuslogConnection {
  aggregate: StatuslogAggregator
  groupBy: StatuslogGroupBy
  values: [Statuslog]
}

type StatuslogConnectionCreated_at {
  connection: StatuslogConnection
  key: DateTime
}

type StatuslogConnectionCumulativeDuration {
  connection: StatuslogConnection
  key: ID
}

type StatuslogConnectionEmployee {
  connection: StatuslogConnection
  key: ID
}

type StatuslogConnectionId {
  connection: StatuslogConnection
  key: ID
}

type StatuslogConnectionPrevStatus {
  connection: StatuslogConnection
  key: ID
}

type StatuslogConnectionPrevStatusDuration {
  connection: StatuslogConnection
  key: ID
}

type StatuslogConnectionStatus {
  connection: StatuslogConnection
  key: ID
}

type StatuslogConnectionUpdated_at {
  connection: StatuslogConnection
  key: DateTime
}

type StatuslogGroupBy {
  created_at: [StatuslogConnectionCreated_at]
  cumulativeDuration: [StatuslogConnectionCumulativeDuration]
  employee: [StatuslogConnectionEmployee]
  id: [StatuslogConnectionId]
  prevStatus: [StatuslogConnectionPrevStatus]
  prevStatusDuration: [StatuslogConnectionPrevStatusDuration]
  status: [StatuslogConnectionStatus]
  updated_at: [StatuslogConnectionUpdated_at]
}

type Street {
  addresses(limit: Int, sort: String, start: Int, where: JSON): [Address]
  created_at: DateTime!
  id: ID!
  name: String!
  suburb: Suburb
  updated_at: DateTime!
}

type StreetAggregator {
  count: Int
  totalCount: Int
}

type StreetConnection {
  aggregate: StreetAggregator
  groupBy: StreetGroupBy
  values: [Street]
}

type StreetConnectionCreated_at {
  connection: StreetConnection
  key: DateTime
}

type StreetConnectionId {
  connection: StreetConnection
  key: ID
}

type StreetConnectionName {
  connection: StreetConnection
  key: String
}

type StreetConnectionSuburb {
  connection: StreetConnection
  key: ID
}

type StreetConnectionUpdated_at {
  connection: StreetConnection
  key: DateTime
}

type StreetGroupBy {
  created_at: [StreetConnectionCreated_at]
  id: [StreetConnectionId]
  name: [StreetConnectionName]
  suburb: [StreetConnectionSuburb]
  updated_at: [StreetConnectionUpdated_at]
}

type Suburb {
  city: City
  created_at: DateTime!
  id: ID!
  name: String!
  streets(limit: Int, sort: String, start: Int, where: JSON): [Street]
  updated_at: DateTime!
}

type SuburbAggregator {
  count: Int
  totalCount: Int
}

type SuburbConnection {
  aggregate: SuburbAggregator
  groupBy: SuburbGroupBy
  values: [Suburb]
}

type SuburbConnectionCity {
  connection: SuburbConnection
  key: ID
}

type SuburbConnectionCreated_at {
  connection: SuburbConnection
  key: DateTime
}

type SuburbConnectionId {
  connection: SuburbConnection
  key: ID
}

type SuburbConnectionName {
  connection: SuburbConnection
  key: String
}

type SuburbConnectionUpdated_at {
  connection: SuburbConnection
  key: DateTime
}

type SuburbGroupBy {
  city: [SuburbConnectionCity]
  created_at: [SuburbConnectionCreated_at]
  id: [SuburbConnectionId]
  name: [SuburbConnectionName]
  updated_at: [SuburbConnectionUpdated_at]
}

type Survey {
  conversation: Conversation
  created_at: DateTime!
  customer: Customer
  deletedAt: DateTime
  disposition: Disposition
  employee: Employee
  id: ID!
  rating: Float
  recording: String
  updated_at: DateTime!
}

type SurveyAggregator {
  avg: SurveyAggregatorAvg
  count: Int
  max: SurveyAggregatorMax
  min: SurveyAggregatorMin
  sum: SurveyAggregatorSum
  totalCount: Int
}

type SurveyAggregatorAvg {
  rating: Float
}

type SurveyAggregatorMax {
  rating: Float
}

type SurveyAggregatorMin {
  rating: Float
}

type SurveyAggregatorSum {
  rating: Float
}

type SurveyConnection {
  aggregate: SurveyAggregator
  groupBy: SurveyGroupBy
  values: [Survey]
}

type SurveyConnectionConversation {
  connection: SurveyConnection
  key: ID
}

type SurveyConnectionCreated_at {
  connection: SurveyConnection
  key: DateTime
}

type SurveyConnectionCustomer {
  connection: SurveyConnection
  key: ID
}

type SurveyConnectionDeletedAt {
  connection: SurveyConnection
  key: DateTime
}

type SurveyConnectionDisposition {
  connection: SurveyConnection
  key: ID
}

type SurveyConnectionEmployee {
  connection: SurveyConnection
  key: ID
}

type SurveyConnectionId {
  connection: SurveyConnection
  key: ID
}

type SurveyConnectionRating {
  connection: SurveyConnection
  key: Float
}

type SurveyConnectionRecording {
  connection: SurveyConnection
  key: String
}

type SurveyConnectionUpdated_at {
  connection: SurveyConnection
  key: DateTime
}

type SurveyGroupBy {
  conversation: [SurveyConnectionConversation]
  created_at: [SurveyConnectionCreated_at]
  customer: [SurveyConnectionCustomer]
  deletedAt: [SurveyConnectionDeletedAt]
  disposition: [SurveyConnectionDisposition]
  employee: [SurveyConnectionEmployee]
  id: [SurveyConnectionId]
  rating: [SurveyConnectionRating]
  recording: [SurveyConnectionRecording]
  updated_at: [SurveyConnectionUpdated_at]
}

type Team {
  campaigns(limit: Int, sort: String, start: Int, where: JSON): [Campaign]
  created_at: DateTime!
  employees(limit: Int, sort: String, start: Int, where: JSON): [Employee]
  id: ID!
  leader: Employee
  name: String
  statuses(limit: Int, sort: String, start: Int, where: JSON): [Status]
  updated_at: DateTime!
}

type TeamAggregator {
  count: Int
  totalCount: Int
}

type TeamConnection {
  aggregate: TeamAggregator
  groupBy: TeamGroupBy
  values: [Team]
}

type TeamConnectionCreated_at {
  connection: TeamConnection
  key: DateTime
}

type TeamConnectionId {
  connection: TeamConnection
  key: ID
}

type TeamConnectionLeader {
  connection: TeamConnection
  key: ID
}

type TeamConnectionName {
  connection: TeamConnection
  key: String
}

type TeamConnectionUpdated_at {
  connection: TeamConnection
  key: DateTime
}

type TeamGroupBy {
  created_at: [TeamConnectionCreated_at]
  id: [TeamConnectionId]
  leader: [TeamConnectionLeader]
  name: [TeamConnectionName]
  updated_at: [TeamConnectionUpdated_at]
}

type Ticket {
  assignedTo: Employee
  comments(limit: Int, sort: String, start: Int, where: JSON): [Comment]
  conversation: Conversation
  created_at: DateTime!
  department: Department
  description: String
  disposition: Disposition
  id: ID!
  isClosed: Boolean
  openedBy: Employee
  priority: Priority
  queryType: Querytype
  region: Region
  subQueryType: Querytype
  subject: String
  ticketType: Tickettype
  updated_at: DateTime!
}

type TicketAggregator {
  count: Int
  totalCount: Int
}

type TicketConnection {
  aggregate: TicketAggregator
  groupBy: TicketGroupBy
  values: [Ticket]
}

type TicketConnectionAssignedTo {
  connection: TicketConnection
  key: ID
}

type TicketConnectionConversation {
  connection: TicketConnection
  key: ID
}

type TicketConnectionCreated_at {
  connection: TicketConnection
  key: DateTime
}

type TicketConnectionDepartment {
  connection: TicketConnection
  key: ID
}

type TicketConnectionDescription {
  connection: TicketConnection
  key: String
}

type TicketConnectionDisposition {
  connection: TicketConnection
  key: ID
}

type TicketConnectionId {
  connection: TicketConnection
  key: ID
}

type TicketConnectionIsClosed {
  connection: TicketConnection
  key: Boolean
}

type TicketConnectionOpenedBy {
  connection: TicketConnection
  key: ID
}

type TicketConnectionPriority {
  connection: TicketConnection
  key: ID
}

type TicketConnectionQueryType {
  connection: TicketConnection
  key: ID
}

type TicketConnectionRegion {
  connection: TicketConnection
  key: ID
}

type TicketConnectionSubQueryType {
  connection: TicketConnection
  key: ID
}

type TicketConnectionSubject {
  connection: TicketConnection
  key: String
}

type TicketConnectionTicketType {
  connection: TicketConnection
  key: ID
}

type TicketConnectionUpdated_at {
  connection: TicketConnection
  key: DateTime
}

type TicketGroupBy {
  assignedTo: [TicketConnectionAssignedTo]
  conversation: [TicketConnectionConversation]
  created_at: [TicketConnectionCreated_at]
  department: [TicketConnectionDepartment]
  description: [TicketConnectionDescription]
  disposition: [TicketConnectionDisposition]
  id: [TicketConnectionId]
  isClosed: [TicketConnectionIsClosed]
  openedBy: [TicketConnectionOpenedBy]
  priority: [TicketConnectionPriority]
  queryType: [TicketConnectionQueryType]
  region: [TicketConnectionRegion]
  subQueryType: [TicketConnectionSubQueryType]
  subject: [TicketConnectionSubject]
  ticketType: [TicketConnectionTicketType]
  updated_at: [TicketConnectionUpdated_at]
}

type Tickettype {
  created_at: DateTime!
  departments(limit: Int, sort: String, start: Int, where: JSON): [Department]
  dispositions(limit: Int, sort: String, start: Int, where: JSON): [Disposition]
  id: ID!
  queryTypes(limit: Int, sort: String, start: Int, where: JSON): [Querytype]
  regions(limit: Int, sort: String, start: Int, where: JSON): [Region]
  type: String
  updated_at: DateTime!
}

type TickettypeAggregator {
  count: Int
  totalCount: Int
}

type TickettypeConnection {
  aggregate: TickettypeAggregator
  groupBy: TickettypeGroupBy
  values: [Tickettype]
}

type TickettypeConnectionCreated_at {
  connection: TickettypeConnection
  key: DateTime
}

type TickettypeConnectionId {
  connection: TickettypeConnection
  key: ID
}

type TickettypeConnectionType {
  connection: TickettypeConnection
  key: String
}

type TickettypeConnectionUpdated_at {
  connection: TickettypeConnection
  key: DateTime
}

type TickettypeGroupBy {
  created_at: [TickettypeConnectionCreated_at]
  id: [TickettypeConnectionId]
  type: [TickettypeConnectionType]
  updated_at: [TickettypeConnectionUpdated_at]
}

type UploadFile {
  created_at: DateTime!
  ext: String
  hash: String!
  id: ID!
  mime: String!
  name: String!
  provider: String!
  provider_metadata: JSON
  related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
  sha256: String
  size: Float!
  updated_at: DateTime!
  url: String!
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
}

type UploadFileConnection {
  aggregate: UploadFileAggregator
  groupBy: UploadFileGroupBy
  values: [UploadFile]
}

type UploadFileConnectionCreated_at {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionExt {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionHash {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionId {
  connection: UploadFileConnection
  key: ID
}

type UploadFileConnectionMime {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionName {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionProvider_metadata {
  connection: UploadFileConnection
  key: JSON
}

type UploadFileConnectionSha256 {
  connection: UploadFileConnection
  key: String
}

type UploadFileConnectionSize {
  connection: UploadFileConnection
  key: Float
}

type UploadFileConnectionUpdated_at {
  connection: UploadFileConnection
  key: DateTime
}

type UploadFileConnectionUrl {
  connection: UploadFileConnection
  key: String
}

type UploadFileGroupBy {
  created_at: [UploadFileConnectionCreated_at]
  ext: [UploadFileConnectionExt]
  hash: [UploadFileConnectionHash]
  id: [UploadFileConnectionId]
  mime: [UploadFileConnectionMime]
  name: [UploadFileConnectionName]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
  sha256: [UploadFileConnectionSha256]
  size: [UploadFileConnectionSize]
  updated_at: [UploadFileConnectionUpdated_at]
  url: [UploadFileConnectionUrl]
}

type UsersPermissionsLoginPayload {
  jwt: String!
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPermission {
  action: String!
  controller: String!
  enabled: Boolean!
  id: ID!
  policy: String
  role: UsersPermissionsRole
  type: String!
}

type UsersPermissionsRole {
  description: String
  id: ID!
  name: String!
  permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
  type: String
  users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  aggregate: UsersPermissionsRoleAggregator
  groupBy: UsersPermissionsRoleGroupBy
  values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionId {
  connection: UsersPermissionsRoleConnection
  key: ID
}

type UsersPermissionsRoleConnectionName {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleConnectionType {
  connection: UsersPermissionsRoleConnection
  key: String
}

type UsersPermissionsRoleGroupBy {
  description: [UsersPermissionsRoleConnectionDescription]
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  created_at: DateTime!
  email: String!
  id: ID!
  profile: Profile
  provider: String
  role: UsersPermissionsRole
  settings: Settingsuser
  updated_at: DateTime!
  username: String!
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  aggregate: UsersPermissionsUserAggregator
  groupBy: UsersPermissionsUserGroupBy
  values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
  connection: UsersPermissionsUserConnection
  key: Boolean
}

type UsersPermissionsUserConnectionCreated_at {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionEmail {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionId {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProfile {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionProvider {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserConnectionRole {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionSettings {
  connection: UsersPermissionsUserConnection
  key: ID
}

type UsersPermissionsUserConnectionUpdated_at {
  connection: UsersPermissionsUserConnection
  key: DateTime
}

type UsersPermissionsUserConnectionUsername {
  connection: UsersPermissionsUserConnection
  key: String
}

type UsersPermissionsUserGroupBy {
  blocked: [UsersPermissionsUserConnectionBlocked]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  email: [UsersPermissionsUserConnectionEmail]
  id: [UsersPermissionsUserConnectionId]
  profile: [UsersPermissionsUserConnectionProfile]
  provider: [UsersPermissionsUserConnectionProvider]
  role: [UsersPermissionsUserConnectionRole]
  settings: [UsersPermissionsUserConnectionSettings]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
}

type createAccountPayload {
  account: Account
}

type createActionPayload {
  action: Action
}

type createAddressPayload {
  address: Address
}

type createCallPayload {
  call: Call
}

type createCampaignPayload {
  campaign: Campaign
}

type createCityPayload {
  city: City
}

type createCommentPayload {
  comment: Comment
}

type createContactPayload {
  contact: Contact
}

type createConversationPayload {
  conversation: Conversation
}

type createCountryPayload {
  country: Country
}

type createCustomerPayload {
  customer: Customer
}

type createDepartmentPayload {
  department: Department
}

type createDispositionPayload {
  disposition: Disposition
}

type createEmailaddressPayload {
  emailaddress: Emailaddress
}

type createEmployeePayload {
  employee: Employee
}

type createEscalationPayload {
  escalation: Escalation
}

type createFilePayload {
  file: UploadFile
}

type createLogPayload {
  log: Log
}

type createMessagePayload {
  message: Message
}

type createMissedcallPayload {
  missedcall: Missedcall
}

type createPhonenumberPayload {
  phonenumber: Phonenumber
}

type createPriorityPayload {
  priority: Priority
}

type createProfilePayload {
  profile: Profile
}

type createQuerytypePayload {
  querytype: Querytype
}

type createRegionPayload {
  region: Region
}

type createRolePayload {
  role: UsersPermissionsRole
}

type createSettingsapiPayload {
  settingsapi: Settingsapi
}

type createSettingsappPayload {
  settingsapp: Settingsapp
}

type createSettingsuserPayload {
  settingsuser: Settingsuser
}

type createSkillPayload {
  skill: Skill
}

type createSsoPayload {
  sso: Sso
}

type createStatusPayload {
  status: Status
}

type createStatuslogPayload {
  statuslog: Statuslog
}

type createStreetPayload {
  street: Street
}

type createSuburbPayload {
  suburb: Suburb
}

type createSurveyPayload {
  survey: Survey
}

type createTeamPayload {
  team: Team
}

type createTicketPayload {
  ticket: Ticket
}

type createTickettypePayload {
  tickettype: Tickettype
}

type createUserPayload {
  user: UsersPermissionsUser
}

type deleteAccountPayload {
  account: Account
}

type deleteActionPayload {
  action: Action
}

type deleteAddressPayload {
  address: Address
}

type deleteCallPayload {
  call: Call
}

type deleteCampaignPayload {
  campaign: Campaign
}

type deleteCityPayload {
  city: City
}

type deleteCommentPayload {
  comment: Comment
}

type deleteContactPayload {
  contact: Contact
}

type deleteConversationPayload {
  conversation: Conversation
}

type deleteCountryPayload {
  country: Country
}

type deleteCustomerPayload {
  customer: Customer
}

type deleteDepartmentPayload {
  department: Department
}

type deleteDispositionPayload {
  disposition: Disposition
}

type deleteEmailaddressPayload {
  emailaddress: Emailaddress
}

type deleteEmployeePayload {
  employee: Employee
}

type deleteEscalationPayload {
  escalation: Escalation
}

type deleteFilePayload {
  file: UploadFile
}

type deleteLogPayload {
  log: Log
}

type deleteMessagePayload {
  message: Message
}

type deleteMissedcallPayload {
  missedcall: Missedcall
}

type deletePhonenumberPayload {
  phonenumber: Phonenumber
}

type deletePriorityPayload {
  priority: Priority
}

type deleteProfilePayload {
  profile: Profile
}

type deleteQuerytypePayload {
  querytype: Querytype
}

type deleteRegionPayload {
  region: Region
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type deleteSettingsapiPayload {
  settingsapi: Settingsapi
}

type deleteSettingsappPayload {
  settingsapp: Settingsapp
}

type deleteSettingsuserPayload {
  settingsuser: Settingsuser
}

type deleteSkillPayload {
  skill: Skill
}

type deleteSsoPayload {
  sso: Sso
}

type deleteStatusPayload {
  status: Status
}

type deleteStatuslogPayload {
  statuslog: Statuslog
}

type deleteStreetPayload {
  street: Street
}

type deleteSuburbPayload {
  suburb: Suburb
}

type deleteSurveyPayload {
  survey: Survey
}

type deleteTeamPayload {
  team: Team
}

type deleteTicketPayload {
  ticket: Ticket
}

type deleteTickettypePayload {
  tickettype: Tickettype
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type updateAccountPayload {
  account: Account
}

type updateActionPayload {
  action: Action
}

type updateAddressPayload {
  address: Address
}

type updateCallPayload {
  call: Call
}

type updateCampaignPayload {
  campaign: Campaign
}

type updateCityPayload {
  city: City
}

type updateCommentPayload {
  comment: Comment
}

type updateContactPayload {
  contact: Contact
}

type updateConversationPayload {
  conversation: Conversation
}

type updateCountryPayload {
  country: Country
}

type updateCustomerPayload {
  customer: Customer
}

type updateDepartmentPayload {
  department: Department
}

type updateDispositionPayload {
  disposition: Disposition
}

type updateEmailaddressPayload {
  emailaddress: Emailaddress
}

type updateEmployeePayload {
  employee: Employee
}

type updateEscalationPayload {
  escalation: Escalation
}

type updateFilePayload {
  file: UploadFile
}

type updateLogPayload {
  log: Log
}

type updateMessagePayload {
  message: Message
}

type updateMissedcallPayload {
  missedcall: Missedcall
}

type updatePhonenumberPayload {
  phonenumber: Phonenumber
}

type updatePriorityPayload {
  priority: Priority
}

type updateProfilePayload {
  profile: Profile
}

type updateQuerytypePayload {
  querytype: Querytype
}

type updateRegionPayload {
  region: Region
}

type updateRolePayload {
  role: UsersPermissionsRole
}

type updateSettingsapiPayload {
  settingsapi: Settingsapi
}

type updateSettingsappPayload {
  settingsapp: Settingsapp
}

type updateSettingsuserPayload {
  settingsuser: Settingsuser
}

type updateSkillPayload {
  skill: Skill
}

type updateSsoPayload {
  sso: Sso
}

type updateStatusPayload {
  status: Status
}

type updateStatuslogPayload {
  statuslog: Statuslog
}

type updateStreetPayload {
  street: Street
}

type updateSuburbPayload {
  suburb: Suburb
}

type updateSurveyPayload {
  survey: Survey
}

type updateTeamPayload {
  team: Team
}

type updateTicketPayload {
  ticket: Ticket
}

type updateTickettypePayload {
  tickettype: Tickettype
}

type updateUserPayload {
  user: UsersPermissionsUser
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

enum ENUM_PHONENUMBER_KIND {
  agent_extension
  fax
  fixed
  internal_extension
  mobile
  unknown
}

enum ENUM_PROFILE_SEX {
  female
  male
  unknown
}

enum ENUM_STATUS_FSSTATE {
  Idle
  In
  Receiving
  Waiting
  a
  call
  queue
}

enum ENUM_STATUS_FSSTATUS {
  Available
  Break
  Logged
  On
  Out
}

enum ENUM_STATUS_ONBUSYWITH {
  agent
  call
  call_review
  chat
  connecting
  customer
  dialing
  email
  fax
  incoming_call
  sms
  ticket
  voicemail
}

input AccountInput {
  address: ID
  customers: [ID]
  electricMeter: String
  holder: ID
  number: String
  waterMeter: String
}

input ActionInput {
  description: String
  dispositions: [ID]
  enabled: Boolean
  methods: String
  services: String
}

input AddressInput {
  contact: ID
  line1: String!
  line2: String
  street: ID
}

input CallInput {
  answeredAt: DateTime
  callSID: String
  conversation: ID
  duration: Int
  endedAt: DateTime
  from: ID
  hasVoicemail: Boolean
  isInbound: Boolean
  misses: [ID]
  openedAt: DateTime
  recording: String
  rungAt: DateTime
  to: ID
  voicemail: String
}

input CampaignInput {
  conversations: [ID]
  deletedAt: DateTime
  description: String
  endsAt: DateTime
  expectedDuration: Int
  flow: JSON
  teams: [ID]
  title: String
}

input CityInput {
  country: ID
  name: String!
  suburbs: [ID]
}

input CommentInput {
  body: String
  deletedAt: DateTime
  ticket: ID
}

input ContactInput {
  addresses: [ID]
  emailaddresses: [ID]
  isBlocked: Boolean
  isVerified: Boolean
  phones: [ID]
  profile: ID
}

input ConversationInput {
  calls: [ID]
  campaign: ID
  chats: [ID]
  customer: ID
  emails: [ID]
  employees: [ID]
  escalationLevel: Int
  faxes: [ID]
  isOpen: Boolean
  latestCall: ID
  latestChat: ID
  latestEmail: ID
  latestFax: ID
  latestSms: ID
  latestTicket: ID
  sms: [ID]
  surveys: [ID]
  tickets: [ID]
}

input CountryInput {
  cities: [ID]
  name: String!
}

input CustomerInput {
  accounts: [ID]
  conversations: [ID]
  inConversation: ID
  profile: ID
  status: ID
  surveys: [ID]
}

input DepartmentInput {
  color: String
  contact: ID
  dispositions: [ID]
  employees: [ID]
  hod: ID
  icon: String
  name: String
  parentDepartment: ID
  queryTypes: [ID]
  regions: [ID]
  subDepartments: [ID]
  ticketTypes: [ID]
  tickets: [ID]
}

input DispositionInput {
  actions: [ID]
  color: String
  departments: [ID]
  description: String
  enabled: Boolean
  icon: String
  isConclusive: Boolean
  ticketTypes: [ID]
  title: String
}

input EmailaddressInput {
  address: String
  confirmed: Boolean
  contact: ID
  escalations: [ID]
  inbox: [ID]
  sent: [ID]
}

input EmployeeInput {
  assignedTickets: [ID]
  conversations: [ID]
  departments: [ID]
  hodOf: ID
  inConversation: ID
  jobTitle: String
  number: String
  profile: ID
  skills: [ID]
  statusesLogs: [ID]
  surveys: [ID]
  team: ID
  teamLeaderOf: ID
  ticketsOpened: [ID]
}

input EscalationInput {
  days: String
  department: ID
  emailAddresses: [ID]
  label: String
  queryType: ID
  region: ID
  subQueryType: ID
}

input FileInput {
  ext: String
  hash: String!
  mime: String!
  name: String!
  provider: String!
  provider_metadata: JSON
  related: [ID]
  sha256: String
  size: Float!
  url: String!
}

input InputID {
  id: ID!
}

input LogInput {
  action: String
  controller: String
  type: String
}

input MessageInput {
  body: String
  chatConversation: ID
  deletedAt: DateTime
  deliveredAt: DateTime
  emailConversation: ID
  faxConversation: ID
  fromEmail: ID
  fromPhone: ID
  isInbound: Boolean
  readAt: DateTime
  smsConversation: ID
  subject: String
  toEmail: ID
  toPhone: ID
}

input MissedcallInput {
  call: ID
  cancelledAt: DateTime
  failedAt: DateTime
  hasVoicemail: Boolean
  ignoredAt: DateTime
  log: String
  openedAt: DateTime
  phone: ID
  rejectedAt: DateTime
}

input PhonenumberInput {
  confirmed: Boolean
  contact: ID
  domain: String
  inboundCalls: [ID]
  inbox: [ID]
  kind: ENUM_PHONENUMBER_KIND
  latestCall: ID
  missedCalls: [ID]
  number: String
  outboundCalls: [ID]
  sent: [ID]
}

input PriorityInput {
  color: String
  icon: String
  label: String
  level: Int!
}

input ProfileInput {
  about: String
  avatar: ID
  contact: ID
  dob: DateTime
  employment: ID
  firstname: String
  lastname: String
  middlename: String
  natID: String
  passportNum: String
  patronage: ID
  rating: Float
  sex: ENUM_PROFILE_SEX
  user: ID
}

input QuerytypeInput {
  color: String
  departments: [ID]
  escalations: [ID]
  icon: String
  label: String
  parentQueryTypes: [ID]
  subQueryTypes: [ID]
  ticketFields: JSON
  ticketTypes: [ID]
}

input RegionInput {
  departments: [ID]
  name: String
  ticketTypes: [ID]
}

input RoleInput {
  description: String
  name: String!
  permissions: [ID]
  type: String
  users: [ID]
}

input SettingsapiInput {
  apiServerHost: String
  apiServerPort: String
  inboundCallESLPort: String
  phonenumberKindRules: JSON
  sipDomain: String
  sipHost: String
  sipPort: String
  sipProtocol: String
  switchCallRecording: String
  switchPath: String
  switchVoicemail: String
}

input SettingsappInput {
  appCaption: String
  appIcon: String
  appLogo: String
  appName: String
  devLogo: String
  devName: String
  initialAutoStatusChangeTimeout: Int
  orgCaption: String
  orgLogo: String
  orgName: String
  unauthorizedElements: String
}

input SettingsuserInput {
  user: ID
}

input SkillInput {
  employees: [ID]
  level: Int
  title: String
}

input SsoInput {
  _: String
}

input StatusInput {
  autoTimeout: Int
  bgColor: String
  caption: String
  color: String
  fsState: ENUM_STATUS_FSSTATE
  fsStatus: ENUM_STATUS_FSSTATUS
  icon: String
  isOnline: Boolean
  label: String
  nextStatus: ID
  onBusyWith: ENUM_STATUS_ONBUSYWITH
  prevStatus: ID
  showInOpts: Boolean
  slug: String
}

input StatuslogInput {
  cumulativeDuration: Long
  employee: ID
  prevStatus: ID
  prevStatusDuration: Long
  status: ID
}

input StreetInput {
  addresses: [ID]
  name: String!
  suburb: ID
}

input SuburbInput {
  city: ID
  name: String!
  streets: [ID]
}

input SurveyInput {
  conversation: ID
  customer: ID
  deletedAt: DateTime
  disposition: ID
  employee: ID
  rating: Float
  recording: String
}

input TeamInput {
  campaigns: [ID]
  employees: [ID]
  leader: ID
  name: String
  statuses: [ID]
}

input TicketInput {
  assignedTo: ID
  comments: [ID]
  conversation: ID
  department: ID
  description: String
  disposition: ID
  isClosed: Boolean
  openedBy: ID
  priority: ID
  queryType: ID
  region: ID
  subQueryType: ID
  subject: String
  ticketType: ID
}

input TickettypeInput {
  departments: [ID]
  dispositions: [ID]
  queryTypes: [ID]
  regions: [ID]
  type: String
}

input UserInput {
  blocked: Boolean
  confirmed: Boolean
  email: String!
  password: String
  profile: ID
  provider: String
  resetPasswordToken: String
  role: ID
  settings: ID
  username: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

input createAccountInput {
  data: AccountInput
}

input createActionInput {
  data: ActionInput
}

input createAddressInput {
  data: AddressInput
}

input createCallInput {
  data: CallInput
}

input createCampaignInput {
  data: CampaignInput
}

input createCityInput {
  data: CityInput
}

input createCommentInput {
  data: CommentInput
}

input createContactInput {
  data: ContactInput
}

input createConversationInput {
  data: ConversationInput
}

input createCountryInput {
  data: CountryInput
}

input createCustomerInput {
  data: CustomerInput
}

input createDepartmentInput {
  data: DepartmentInput
}

input createDispositionInput {
  data: DispositionInput
}

input createEmailaddressInput {
  data: EmailaddressInput
}

input createEmployeeInput {
  data: EmployeeInput
}

input createEscalationInput {
  data: EscalationInput
}

input createFileInput {
  data: FileInput
}

input createLogInput {
  data: LogInput
}

input createMessageInput {
  data: MessageInput
}

input createMissedcallInput {
  data: MissedcallInput
}

input createPhonenumberInput {
  data: PhonenumberInput
}

input createPriorityInput {
  data: PriorityInput
}

input createProfileInput {
  data: ProfileInput
}

input createQuerytypeInput {
  data: QuerytypeInput
}

input createRegionInput {
  data: RegionInput
}

input createRoleInput {
  data: RoleInput
}

input createSettingsapiInput {
  data: SettingsapiInput
}

input createSettingsappInput {
  data: SettingsappInput
}

input createSettingsuserInput {
  data: SettingsuserInput
}

input createSkillInput {
  data: SkillInput
}

input createSsoInput {
  data: SsoInput
}

input createStatusInput {
  data: StatusInput
}

input createStatuslogInput {
  data: StatuslogInput
}

input createStreetInput {
  data: StreetInput
}

input createSuburbInput {
  data: SuburbInput
}

input createSurveyInput {
  data: SurveyInput
}

input createTeamInput {
  data: TeamInput
}

input createTicketInput {
  data: TicketInput
}

input createTickettypeInput {
  data: TickettypeInput
}

input createUserInput {
  data: UserInput
}

input deleteAccountInput {
  where: InputID
}

input deleteActionInput {
  where: InputID
}

input deleteAddressInput {
  where: InputID
}

input deleteCallInput {
  where: InputID
}

input deleteCampaignInput {
  where: InputID
}

input deleteCityInput {
  where: InputID
}

input deleteCommentInput {
  where: InputID
}

input deleteContactInput {
  where: InputID
}

input deleteConversationInput {
  where: InputID
}

input deleteCountryInput {
  where: InputID
}

input deleteCustomerInput {
  where: InputID
}

input deleteDepartmentInput {
  where: InputID
}

input deleteDispositionInput {
  where: InputID
}

input deleteEmailaddressInput {
  where: InputID
}

input deleteEmployeeInput {
  where: InputID
}

input deleteEscalationInput {
  where: InputID
}

input deleteFileInput {
  where: InputID
}

input deleteLogInput {
  where: InputID
}

input deleteMessageInput {
  where: InputID
}

input deleteMissedcallInput {
  where: InputID
}

input deletePhonenumberInput {
  where: InputID
}

input deletePriorityInput {
  where: InputID
}

input deleteProfileInput {
  where: InputID
}

input deleteQuerytypeInput {
  where: InputID
}

input deleteRegionInput {
  where: InputID
}

input deleteRoleInput {
  where: InputID
}

input deleteSettingsapiInput {
  where: InputID
}

input deleteSettingsappInput {
  where: InputID
}

input deleteSettingsuserInput {
  where: InputID
}

input deleteSkillInput {
  where: InputID
}

input deleteSsoInput {
  where: InputID
}

input deleteStatusInput {
  where: InputID
}

input deleteStatuslogInput {
  where: InputID
}

input deleteStreetInput {
  where: InputID
}

input deleteSuburbInput {
  where: InputID
}

input deleteSurveyInput {
  where: InputID
}

input deleteTeamInput {
  where: InputID
}

input deleteTicketInput {
  where: InputID
}

input deleteTickettypeInput {
  where: InputID
}

input deleteUserInput {
  where: InputID
}

input editAccountInput {
  address: ID
  customers: [ID]
  electricMeter: String
  holder: ID
  number: String
  waterMeter: String
}

input editActionInput {
  description: String
  dispositions: [ID]
  enabled: Boolean
  methods: String
  services: String
}

input editAddressInput {
  contact: ID
  line1: String
  line2: String
  street: ID
}

input editCallInput {
  answeredAt: DateTime
  callSID: String
  conversation: ID
  duration: Int
  endedAt: DateTime
  from: ID
  hasVoicemail: Boolean
  isInbound: Boolean
  misses: [ID]
  openedAt: DateTime
  recording: String
  rungAt: DateTime
  to: ID
  voicemail: String
}

input editCampaignInput {
  conversations: [ID]
  deletedAt: DateTime
  description: String
  endsAt: DateTime
  expectedDuration: Int
  flow: JSON
  teams: [ID]
  title: String
}

input editCityInput {
  country: ID
  name: String
  suburbs: [ID]
}

input editCommentInput {
  body: String
  deletedAt: DateTime
  ticket: ID
}

input editContactInput {
  addresses: [ID]
  emailaddresses: [ID]
  isBlocked: Boolean
  isVerified: Boolean
  phones: [ID]
  profile: ID
}

input editConversationInput {
  calls: [ID]
  campaign: ID
  chats: [ID]
  customer: ID
  emails: [ID]
  employees: [ID]
  escalationLevel: Int
  faxes: [ID]
  isOpen: Boolean
  latestCall: ID
  latestChat: ID
  latestEmail: ID
  latestFax: ID
  latestSms: ID
  latestTicket: ID
  sms: [ID]
  surveys: [ID]
  tickets: [ID]
}

input editCountryInput {
  cities: [ID]
  name: String
}

input editCustomerInput {
  accounts: [ID]
  conversations: [ID]
  inConversation: ID
  profile: ID
  status: ID
  surveys: [ID]
}

input editDepartmentInput {
  color: String
  contact: ID
  dispositions: [ID]
  employees: [ID]
  hod: ID
  icon: String
  name: String
  parentDepartment: ID
  queryTypes: [ID]
  regions: [ID]
  subDepartments: [ID]
  ticketTypes: [ID]
  tickets: [ID]
}

input editDispositionInput {
  actions: [ID]
  color: String
  departments: [ID]
  description: String
  enabled: Boolean
  icon: String
  isConclusive: Boolean
  ticketTypes: [ID]
  title: String
}

input editEmailaddressInput {
  address: String
  confirmed: Boolean
  contact: ID
  escalations: [ID]
  inbox: [ID]
  sent: [ID]
}

input editEmployeeInput {
  assignedTickets: [ID]
  conversations: [ID]
  departments: [ID]
  hodOf: ID
  inConversation: ID
  jobTitle: String
  number: String
  profile: ID
  skills: [ID]
  statusesLogs: [ID]
  surveys: [ID]
  team: ID
  teamLeaderOf: ID
  ticketsOpened: [ID]
}

input editEscalationInput {
  days: String
  department: ID
  emailAddresses: [ID]
  label: String
  queryType: ID
  region: ID
  subQueryType: ID
}

input editFileInput {
  ext: String
  hash: String
  mime: String
  name: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  sha256: String
  size: Float
  url: String
}

input editLogInput {
  action: String
  controller: String
  type: String
}

input editMessageInput {
  body: String
  chatConversation: ID
  deletedAt: DateTime
  deliveredAt: DateTime
  emailConversation: ID
  faxConversation: ID
  fromEmail: ID
  fromPhone: ID
  isInbound: Boolean
  readAt: DateTime
  smsConversation: ID
  subject: String
  toEmail: ID
  toPhone: ID
}

input editMissedcallInput {
  call: ID
  cancelledAt: DateTime
  failedAt: DateTime
  hasVoicemail: Boolean
  ignoredAt: DateTime
  log: String
  openedAt: DateTime
  phone: ID
  rejectedAt: DateTime
}

input editPhonenumberInput {
  confirmed: Boolean
  contact: ID
  domain: String
  inboundCalls: [ID]
  inbox: [ID]
  kind: ENUM_PHONENUMBER_KIND
  latestCall: ID
  missedCalls: [ID]
  number: String
  outboundCalls: [ID]
  sent: [ID]
}

input editPriorityInput {
  color: String
  icon: String
  label: String
  level: Int
}

input editProfileInput {
  about: String
  avatar: ID
  contact: ID
  dob: DateTime
  employment: ID
  firstname: String
  lastname: String
  middlename: String
  natID: String
  passportNum: String
  patronage: ID
  rating: Float
  sex: ENUM_PROFILE_SEX
  user: ID
}

input editQuerytypeInput {
  color: String
  departments: [ID]
  escalations: [ID]
  icon: String
  label: String
  parentQueryTypes: [ID]
  subQueryTypes: [ID]
  ticketFields: JSON
  ticketTypes: [ID]
}

input editRegionInput {
  departments: [ID]
  name: String
  ticketTypes: [ID]
}

input editRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

input editSettingsapiInput {
  apiServerHost: String
  apiServerPort: String
  inboundCallESLPort: String
  phonenumberKindRules: JSON
  sipDomain: String
  sipHost: String
  sipPort: String
  sipProtocol: String
  switchCallRecording: String
  switchPath: String
  switchVoicemail: String
}

input editSettingsappInput {
  appCaption: String
  appIcon: String
  appLogo: String
  appName: String
  devLogo: String
  devName: String
  initialAutoStatusChangeTimeout: Int
  orgCaption: String
  orgLogo: String
  orgName: String
  unauthorizedElements: String
}

input editSettingsuserInput {
  user: ID
}

input editSkillInput {
  employees: [ID]
  level: Int
  title: String
}

input editSsoInput {
  _: String
}

input editStatusInput {
  autoTimeout: Int
  bgColor: String
  caption: String
  color: String
  fsState: ENUM_STATUS_FSSTATE
  fsStatus: ENUM_STATUS_FSSTATUS
  icon: String
  isOnline: Boolean
  label: String
  nextStatus: ID
  onBusyWith: ENUM_STATUS_ONBUSYWITH
  prevStatus: ID
  showInOpts: Boolean
  slug: String
}

input editStatuslogInput {
  cumulativeDuration: Long
  employee: ID
  prevStatus: ID
  prevStatusDuration: Long
  status: ID
}

input editStreetInput {
  addresses: [ID]
  name: String
  suburb: ID
}

input editSuburbInput {
  city: ID
  name: String
  streets: [ID]
}

input editSurveyInput {
  conversation: ID
  customer: ID
  deletedAt: DateTime
  disposition: ID
  employee: ID
  rating: Float
  recording: String
}

input editTeamInput {
  campaigns: [ID]
  employees: [ID]
  leader: ID
  name: String
  statuses: [ID]
}

input editTicketInput {
  assignedTo: ID
  comments: [ID]
  conversation: ID
  department: ID
  description: String
  disposition: ID
  isClosed: Boolean
  openedBy: ID
  priority: ID
  queryType: ID
  region: ID
  subQueryType: ID
  subject: String
  ticketType: ID
}

input editTickettypeInput {
  departments: [ID]
  dispositions: [ID]
  queryTypes: [ID]
  regions: [ID]
  type: String
}

input editUserInput {
  blocked: Boolean
  confirmed: Boolean
  email: String
  password: String
  profile: ID
  provider: String
  resetPasswordToken: String
  role: ID
  settings: ID
  username: String
}

input updateAccountInput {
  data: editAccountInput
  where: InputID
}

input updateActionInput {
  data: editActionInput
  where: InputID
}

input updateAddressInput {
  data: editAddressInput
  where: InputID
}

input updateCallInput {
  data: editCallInput
  where: InputID
}

input updateCampaignInput {
  data: editCampaignInput
  where: InputID
}

input updateCityInput {
  data: editCityInput
  where: InputID
}

input updateCommentInput {
  data: editCommentInput
  where: InputID
}

input updateContactInput {
  data: editContactInput
  where: InputID
}

input updateConversationInput {
  data: editConversationInput
  where: InputID
}

input updateCountryInput {
  data: editCountryInput
  where: InputID
}

input updateCustomerInput {
  data: editCustomerInput
  where: InputID
}

input updateDepartmentInput {
  data: editDepartmentInput
  where: InputID
}

input updateDispositionInput {
  data: editDispositionInput
  where: InputID
}

input updateEmailaddressInput {
  data: editEmailaddressInput
  where: InputID
}

input updateEmployeeInput {
  data: editEmployeeInput
  where: InputID
}

input updateEscalationInput {
  data: editEscalationInput
  where: InputID
}

input updateFileInput {
  data: editFileInput
  where: InputID
}

input updateLogInput {
  data: editLogInput
  where: InputID
}

input updateMessageInput {
  data: editMessageInput
  where: InputID
}

input updateMissedcallInput {
  data: editMissedcallInput
  where: InputID
}

input updatePhonenumberInput {
  data: editPhonenumberInput
  where: InputID
}

input updatePriorityInput {
  data: editPriorityInput
  where: InputID
}

input updateProfileInput {
  data: editProfileInput
  where: InputID
}

input updateQuerytypeInput {
  data: editQuerytypeInput
  where: InputID
}

input updateRegionInput {
  data: editRegionInput
  where: InputID
}

input updateRoleInput {
  data: editRoleInput
  where: InputID
}

input updateSettingsapiInput {
  data: editSettingsapiInput
  where: InputID
}

input updateSettingsappInput {
  data: editSettingsappInput
  where: InputID
}

input updateSettingsuserInput {
  data: editSettingsuserInput
  where: InputID
}

input updateSkillInput {
  data: editSkillInput
  where: InputID
}

input updateSsoInput {
  data: editSsoInput
  where: InputID
}

input updateStatusInput {
  data: editStatusInput
  where: InputID
}

input updateStatuslogInput {
  data: editStatuslogInput
  where: InputID
}

input updateStreetInput {
  data: editStreetInput
  where: InputID
}

input updateSuburbInput {
  data: editSuburbInput
  where: InputID
}

input updateSurveyInput {
  data: editSurveyInput
  where: InputID
}

input updateTeamInput {
  data: editTeamInput
  where: InputID
}

input updateTicketInput {
  data: editTicketInput
  where: InputID
}

input updateTickettypeInput {
  data: editTickettypeInput
  where: InputID
}

input updateUserInput {
  data: editUserInput
  where: InputID
}


"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date
