import chai from 'chai';

const { expect } = chai;

import util from 'util';

util.inspect.defaultOptions.depth = 20;



import gql from 'graphql-tag';
import {
  genGraphQLDefaults,
  genTypesDefinitionsMaps,
  mergeWithDefaults,
  isDefault,
  resetToDefaults,
} from '../index';

import { importSchema } from 'graphql-import';

let typeDefs = importSchema('./schema.graphql');

genTypesDefinitionsMaps(typeDefs);


// console.debug(`SCHEMA: `, schema);
// console.debug(`TYPEDEFS: `, typeDefs);
// console.debug(`AST TYPEDEFS: `, typeDefs);

let query, results, CONTEXT = {};


describe(`# Get GraphQL Query Object`, function () {
  // todo put other tests in context like below context for uniformity
  it(`returns correct non-nested js object of an OBJECT query`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        query getProfile ($id: ID!) {
          profile(id: $id) {
            firstname
            lastname
            about
            dob
          }
        }
      `,
    });


    // console.debug(`results: `, results);

    expect(results.profile).to.be.deep.equal({
      __typename: 'Profile',
      firstname:  '',
      lastname:   '',
      about:      '',
      dob:        '',
    });
  });





  context(`non-nested js object of an ARRAY query`, async function () {
    before(function () {
      // let file = path.resolve(__dirname, './graphql/profile.graphql');
      // console.debug(`file: `, file);
      // let query = require (file);
      // console.debug(`imported query: `, query);

      CONTEXT = {};
      results = genGraphQLDefaults({
        operation: gql`
          query getProfiles {
            profiles {
              firstname
              lastname
              about
              dob
            }
          }
        `,
        context:   CONTEXT,
      });

      // console.debug(`results: `, results);
    });


    it(`returns correct defaults`, async function () {
      expect(results.profiles).to.be.deep.equal([{
        __typename: 'Profile',
        firstname:  '',
        lastname:   '',
        about:      '',
        dob:        '',
      }]);
    });

    it(`merges partial server data with defaults`, async function () {
      let merged = mergeWithDefaults({
        path:    'profiles',
        data:    [{
          firstname: 'Huga',
          lastname:  'Matrix',
          dob:       null,
        }],
        context: CONTEXT,
      });

      // console.debug(`index.test.mjs-102: () - merged: `, merged);

      expect(merged).to.be.eql([{
        __typename: 'Profile',
        firstname:  'Huga',
        lastname:   'Matrix',
        about:      '',
        dob:        '',
      }]);
    });
  });





  it(`returns correct non-NESTED js object of multiple objects query`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        query getProfileMsg ($id: ID!) {
          profile(id: $id) {
            firstname
            lastname
            about
            dob
          }
          message(id: $id) {
            id
            body
            created_at
            subject
          }
        }
      `,
    });


    // console.debug(`results: `, results);

    expect(results).to.be.deep.equal({
      profile: {
        __typename: 'Profile',
        firstname:  '',
        lastname:   '',
        about:      '',
        dob:        '',
      },
      message: {
        __typename: 'Message',
        id:         null,
        body:       '',
        created_at: '',
        subject:    '',
      },
    });
  });





  it(`returns correct non-nested js object of multiple ARRAYS query`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        query getProfilesMsgs {
          profiles {
            firstname
            lastname
            about
            dob
          }
          messages {
            id
            body
            created_at
            subject
          }
        }
      `,
    });


    // console.debug(`results: `, results);

    expect(results).to.be.deep.equal({
      profiles: [{
        __typename: 'Profile',
        firstname:  '',
        lastname:   '',
        about:      '',
        dob:        '',
      }],
      messages: [{
        __typename: 'Message',
        id:         null,
        body:       '',
        created_at: '',
        subject:    '',
      }],
    });
  });





  context(`NESTED js object of an ARRAY query`, function () {
    before(function () {
      CONTEXT = {};

      results = genGraphQLDefaults({
        operation: gql`
          query getCategoriesContact {
            querytypes {
              label
              color
              icon
              departments {
                name
                created_at
                updated_at
                employees {
                  number
                }
                tickets {
                  subject
                }
              }
            }
          }
        `,
        context:   CONTEXT,
      });

      // console.debug(`results: `, results);
    });


    it(`returns correct defaults`, async function () {
      // let file = path.resolve(__dirname, './graphql/profile.graphql');
      // console.debug(`file: `, file);
      // let query = require (file);
      // console.debug(`imported query: `, query);

      expect(results.querytypes).to.be.deep.equal([{
        __typename:  'Querytype',
        label:       '',
        color:       '',
        icon:        '',
        departments: [{
          __typename: 'Department',
          name:       '',
          created_at: '',
          updated_at: '',
          employees:  [{
            __typename: 'Employee',
            number:     '',
          }],
          tickets:    [{
            __typename: 'Ticket',
            subject:    '',
          }],
        }],
      }]);

    });


    it(`merges PARTIAL server data with defaults `, async function () {
      let merged = mergeWithDefaults({
        path:    'querytypes',
        data:    [
          {
            label:       'Querytype 1',
            color:       'Green',
            departments: [{
              name:       'Department Name',
              created_at: '2019-09-11T10:00',
              updated_at: null,
              employees:  null,
              tickets:    [{ subject: 'Cobaltums messis in hortus!' }, { subject: 'hortus!' }],
            }, {
              name:       'Department Name',
              created_at: '2019-09-11T10:00',
              updated_at: null,
              employees:  [{ number: '79216dcf' }, { number: '9987542678' }],
              tickets:    [],
            }, {
              name:       'Department Name',
              created_at: '2019-09-11T10:00',
              updated_at: null,
              employees:  null,
              tickets:    [{ subject: 'Coordinatae assimilants, tanquam peritus lamia.' }, { subject: 'Onus festus frondator est.' }, { subject: 'Est fidelis magister, cesaris.' }],
            }],
          },

          {
            label:       'Querytype 2',
            color:       'Brown',
            icon:        'mdi-settings',
            departments: null,
          },

          {
            label:       'Querytype 3',
            color:       'Red',
            departments: [{
              name:       'Department Name',
              created_at: '2019-09-11T10:00',
              updated_at: null,
              employees:  null,
              tickets:    [{ subject: 'Cobaltums messis in hortus!' }, { subject: 'hortus!' }],
            }, {
              name:       'Department Name',
              created_at: '2019-09-11T10:00',
              updated_at: null,
              employees:  [{ number: '79216dcf' }, { number: '9987542678' }],
              tickets:    [],
            }, {
              name:       'Department Name',
              created_at: '2019-09-11T10:00',
              updated_at: null,
              employees:  null,
              tickets:    [{ subject: 'Coordinatae assimilants, tanquam peritus lamia.' }, { subject: 'Onus festus frondator est.' }, { subject: 'Est fidelis magister, cesaris.' }],
            }],
          },
        ],
        context: CONTEXT,
      });

      // console.debug(`index.test.mjs-259: () - merged: `, merged);

      expect(merged).to.be.eql([
        {
          __typename:  'Querytype',
          label:       'Querytype 1',
          color:       'Green',
          icon:        '',
          departments: [{
            __typename: 'Department',
            name:       'Department Name',
            created_at: '2019-09-11T10:00',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '' }],
            tickets:    [{ __typename: 'Ticket', subject: 'Cobaltums messis in hortus!' }, {
              __typename: 'Ticket',
              subject:    'hortus!',
            }],
          }, {
            __typename: 'Department',
            name:       'Department Name',
            created_at: '2019-09-11T10:00',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '79216dcf' }, {
              __typename: 'Employee',
              number:     '9987542678',
            }],
            tickets:    [{ __typename: 'Ticket', subject: '' }],
          }, {
            __typename: 'Department',
            name:       'Department Name',
            created_at: '2019-09-11T10:00',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '' }],
            tickets:    [{
              __typename: 'Ticket',
              subject:    'Coordinatae assimilants, tanquam peritus lamia.',
            }, { __typename: 'Ticket', subject: 'Onus festus frondator est.' }, {
              __typename: 'Ticket',
              subject:    'Est fidelis magister, cesaris.',
            }],
          }],
        },

        {
          __typename:  'Querytype',
          label:       'Querytype 2',
          color:       'Brown',
          icon:        'mdi-settings',
          departments: [{
            __typename: 'Department',
            name:       '',
            created_at: '',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '' }],
            tickets:    [{ __typename: 'Ticket', subject: '' }],
          }],
        },

        {
          __typename:  'Querytype',
          label:       'Querytype 3',
          color:       'Red',
          icon:        '',
          departments: [{
            __typename: 'Department',
            name:       'Department Name',
            created_at: '2019-09-11T10:00',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '' }],
            tickets:    [{ __typename: 'Ticket', subject: 'Cobaltums messis in hortus!' },
                         { __typename: 'Ticket', subject: 'hortus!' },
            ],
          }, {
            __typename: 'Department',
            name:       'Department Name',
            created_at: '2019-09-11T10:00',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '79216dcf' }, {
              __typename: 'Employee',
              number:     '9987542678',
            }],
            tickets:    [{ __typename: 'Ticket', subject: '' }],
          }, {
            __typename: 'Department',
            name:       'Department Name',
            created_at: '2019-09-11T10:00',
            updated_at: '',
            employees:  [{ __typename: 'Employee', number: '' }],
            tickets:    [
              {
                __typename: 'Ticket',
                subject:    'Coordinatae assimilants, tanquam peritus lamia.',
              },
              { __typename: 'Ticket', subject: 'Onus festus frondator est.' },
              {
                __typename: 'Ticket',
                subject:    'Est fidelis magister, cesaris.',
              }],
          }],
        },
      ]);
    });

    it(`merges completely EMPTY server data  with defaults `, async function () {
      let merged = mergeWithDefaults({ path: 'querytypes', data: [], context: results });

      // console.debug(`index.test.mjs-259: () - merged: `, merged);

      expect(merged).to.be.eql([{
        __typename:  'Querytype',
        label:       '',
        color:       '',
        icon:        '',
        departments: [{
          __typename: 'Department',
          name:       '',
          created_at: '',
          updated_at: '',
          employees:  [{
            __typename: 'Employee',
            number:     '',
          }],
          tickets:    [{
            __typename: 'Ticket',
            subject:    '',
          }],
        }],
      }]);
    });

    it(`merges completely UNDEFINED server data  with defaults `, async function () {
      let merged = mergeWithDefaults({ path: 'querytypes', context: results });

      // console.debug(`index.test.mjs-259: () - merged: `, merged);

      expect(merged).to.be.eql([{
        __typename:  'Querytype',
        label:       '',
        color:       '',
        icon:        '',
        departments: [{
          __typename: 'Department',
          name:       '',
          created_at: '',
          updated_at: '',
          employees:  [{
            __typename: 'Employee',
            number:     '',
          }],
          tickets:    [{
            __typename: 'Ticket',
            subject:    '',
          }],
        }],
      }]);
    });

  });





  it(`returns correct js object based on different name of type (phones is PhoneNumber type in schema)`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        query getContact {
          contacts {
            phones {
              number
              confirmed
            }
          }
        }
      `,
    });


    // console.debug(`results: `, results);

    expect(results.contacts).to.be.deep.equal([{
      __typename: 'Contact',
      phones:     [{
        __typename: 'Phonenumber',
        number:     '',
        confirmed:  false,
      }],
    }]);
  });





  it(`returns correct NESTED js object of an ARRAY query with fragment`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        query getCategories {
          querytypes {
            ...catFields
            departments {
              ...deptFields
            }
          }
        }

        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            number
          }
        }
      `,
    });


    // console.debug(`results: `, results);

    expect(results.querytypes).to.be.deep.equal([{
      __typename:  'Querytype',
      label:       '',
      color:       '',
      icon:        '',
      departments: [{
        __typename: 'Department',
        name:       '',
        created_at: '',
        updated_at: '',
        employees:  [{
          __typename: 'Employee',
          number:     '',
        }],
      }],
    }]);
  });





  it(`returns correct js object when query in using aliases (phonebook instead of contacts...)`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        query getContact {
          phonebook: contacts {
            cellphones: phones {
              num: number
              confirmed
            }
          }
        }
      `,
    });


    // console.debug(`results: `, results);

    expect(results.phonebook).to.be.deep.equal([{
      __typename: 'Contact',
      cellphones: [{
        __typename: 'Phonenumber',
        num:        '',
        confirmed:  false,
      }],
    }]);
  });




  it(`returns correct NESTED js object with ListType populated`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation:         gql`
        query getCategories {
          querytypes {
            ...catFields
            departments {
              ...deptFields
            }
          }
        }

        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            id
            number
          }
        }
      `,
      populateListTypes: false,
    });


    // console.debug(`results: `, results);

    expect(results.querytypes).to.be.deep.equal([{
      __typename:  'Querytype',
      label:       '',
      color:       '',
      icon:        '',
      departments: [{
        __typename: 'Department',
        name:       '',
        created_at: '',
        updated_at: '',
        employees:  [],
      }],
    }]);
  });




  it.skip(`works with wrapped subscriptions`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        #      subscription updatedQuerytype($id: ID!) {
        #        afterUpdateQuerytype (id: $id) {
        #          querytype {
        #            ...catFields
        #            departments {
        #              ...deptFields
        #            }
        #          }
        #        }
        #      }


        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            number
          }
        }
      `,
    });

    // console.debug(`results: `, results);

    expect(results.afterUpdateQuerytype).to.be.deep.equal({
      __typename: 'updateQuerytypePayload',
      querytype:  {
        __typename:  'Querytype',
        label:       '',
        color:       '',
        icon:        '',
        departments: [{
          __typename: 'Department',
          name:       '',
          created_at: '',
          updated_at: '',
          employees:  [{
            __typename: 'Employee',
            number:     '',
          }],
        }],
      },
    });
  });




  it(`works with unwrapped mutations`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        mutation loginM ($identifier: String!, $password: String!, $provider: String!){
          login (input: {identifier: $identifier, password: $password, provider: $provider}) {
            jwt
            user {
              username
            }
          }
        }
      `,
    });

    // console.debug(`results: `, results);

    expect(results.login).to.be.deep.equal({
      __typename: 'UsersPermissionsLoginPayload',
      jwt:        '',
      user:       {
        __typename: 'UsersPermissionsUser',
        username:   '',
      },
    });
  });




  it(`works with mutations`, async function () {
    // let file = path.resolve(__dirname, './graphql/profile.graphql');
    // console.debug(`file: `, file);
    // let query = require (file);
    // console.debug(`imported query: `, query);

    results = genGraphQLDefaults({
      operation: gql`
        mutation updateQuerytype ($id: ID!){
          updateQuerytype(input: {where: {id: $id}, data: {color: "red"}}) {
            querytype {
              ...catFields
              departments {
                ...deptFields
              }
            }
          }
        }


        fragment catFields on Querytype {
          label
          color
          icon
        }

        fragment deptFields on Department {
          name
          created_at
          updated_at
          employees {
            number
          }
        }
      `,
      context:   CONTEXT,
    });

    // console.debug(`results: `, results);

    expect(results.updateQuerytype).to.be.deep.equal({
      __typename: 'updateQuerytypePayload',
      querytype:  {
        __typename:  'Querytype',
        label:       '',
        color:       '',
        icon:        '',
        departments: [{
          __typename: 'Department',
          name:       '',
          created_at: '',
          updated_at: '',
          employees:  [{
            __typename: 'Employee',
            number:     '',
          }],
        }],
      },
    });
  });



});
