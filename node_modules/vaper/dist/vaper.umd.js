(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('lodash.isarray'), require('lodash.isobject')) :
  typeof define === 'function' && define.amd ? define(['lodash.isarray', 'lodash.isobject'], factory) :
  (global = global || self, global.vaper = factory(global.isArray, global.isObject));
}(this, function (isArray, isObject) { 'use strict';

  isArray = isArray && isArray.hasOwnProperty('default') ? isArray['default'] : isArray;
  isObject = isObject && isObject.hasOwnProperty('default') ? isObject['default'] : isObject;

  var Vaper = /** @class */ (function () {
      function Vaper() {
          var _this = this;
          this.parseArray = function (replaceFrom, replaceWith) { return function (array) {
              return array.map(function (v) {
                  if (isArray(v)) {
                      return _this.parseArray(replaceFrom, replaceWith)(v);
                  }
                  if (isObject(v)) {
                      return _this.parseObject(replaceFrom, replaceWith)(v);
                  }
                  return _this.valueReplacer(replaceFrom, replaceWith)(v);
              });
          }; };
          this.parseObject = function (replaceFrom, replaceWith) { return function (object) {
              /**
               * Recursive function that change object deeply.
               * @param {Object} child data object child value to convert.
               */
              var recursive = function (child) {
                  var newObject = {};
                  Object.keys(child).map(function (k) {
                      var value = child[k];
                      if (isArray(value)) {
                          newObject[k] = _this.parseArray(replaceFrom, replaceWith)(value);
                      }
                      else if (isObject(value)) {
                          newObject[k] = recursive(value);
                      }
                      else {
                          newObject[k] = _this.valueReplacer(replaceFrom, replaceWith)(value);
                      }
                      return true;
                  });
                  return newObject;
              };
              return recursive(object);
          }; };
          this.valueReplacer = function (replaceFrom, replaceWith) { return function (value) {
              if (value === replaceFrom)
                  return replaceWith;
              return value;
          }; };
      }
      return Vaper;
  }());
  var vaper = new Vaper();
  var index = (function (replaceFrom, replaceWith) { return function (data) {
      if (isArray(data))
          return vaper.parseArray(replaceFrom, replaceWith)(data);
      if (isObject(data))
          return vaper.parseObject(replaceFrom, replaceWith)(data);
      return vaper.valueReplacer(replaceFrom, replaceWith)(data);
  }; });

  return index;

}));
//# sourceMappingURL=vaper.umd.js.map
